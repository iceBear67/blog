<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>nstd::out • Posts by &#34;compiler tech java&#34; tag</title>
        <link>https://ib67.io</link>
        <description>iceBear 的博客</description>
        <language>zh-CN</language>
        <pubDate>Wed, 06 Jul 2022 19:25:58 +0800</pubDate>
        <lastBuildDate>Wed, 06 Jul 2022 19:25:58 +0800</lastBuildDate>
        <category>life</category>
        <category>memories</category>
        <category>compiler tech java</category>
        <category>tech</category>
        <category>misc</category>
        <category>linux</category>
        <category>summary</category>
        <item>
            <guid isPermalink="true">https://ib67.io/2022/07/06/Extending-Java-Compiler/</guid>
            <title>「9+」 Java 编译器插件教程 101</title>
            <link>https://ib67.io/2022/07/06/Extending-Java-Compiler/</link>
            <category>compiler tech java</category>
            <pubDate>Wed, 06 Jul 2022 19:25:58 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;写了上万行 Java 代码，相比你已经对 Java “木纳呆板”的语法恨之入骨了。  &lt;/p&gt;
&lt;p&gt;那么，有没有一种可能，我是说可能，我们可以给 Java 编译器写插件？&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;如果你要在面包店里买面包，你最好跟店员说你要买哪块面包。本文所指的 &lt;code&gt;Java 编译器&lt;/code&gt; 均为 OpenJDK 自带的那个 &lt;code&gt;javac&lt;/code&gt;，而不是其他的前端编译器实现。&lt;/p&gt;
&lt;h1 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;自从 Java 8 起，Oracle 就将&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/jdk/api/javac/tree/com/sun/source/util/Plugin.html&#34;&gt;插件&lt;/a&gt;系统引入了 &lt;code&gt;javac&lt;/code&gt; 中，因此是可以写 Javac 插件的。&lt;/p&gt;
&lt;p&gt;虽然写一个 Javac 插件并且修改代码是可能的，但是这方面的资料很少（国内就更少了），并且大多内容重复（教你写个 HelloWorld 然后就结束），其次 javac 的东西也不是很好摸，毕竟不是公开 API（ JDK 9+ 开始已经不暴露在外了）。  &lt;/p&gt;
&lt;p&gt;恰逢今年还没写技术类的博客，就拿来磨磨刀吧。&lt;/p&gt;
&lt;h1 id=&#34;先从插件说起&#34;&gt;&lt;a href=&#34;#先从插件说起&#34; class=&#34;headerlink&#34; title=&#34;先从插件说起&#34;&gt;&lt;/a&gt;先从插件说起&lt;/h1&gt;&lt;p&gt;上文刚刚提到了一个词，&lt;code&gt;插件&lt;/code&gt;。它其实正是 &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/jdk/api/javac/tree/com/sun/source/util/Plugin.html&#34;&gt;com.sun.source.util.Plugin&lt;/a&gt;。通过这个类，我们可以让 Javac 在编译时加载我们的代码。&lt;/p&gt;
&lt;p&gt;加载了代码，那么做什么呢？所以我们立一个目标：&lt;em&gt;给所有 &lt;code&gt;@Jsonized&lt;/code&gt; 标注过的类都生成一个可以输出 json 的 &lt;code&gt;toString()&lt;/code&gt; 方法。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;什么意思呢？就比如说这样一个类：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyResponse&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String message;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; success;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyResponse&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String message, &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; success)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.message = message;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.success = success;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后你想把它序列化成 Json。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; response = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MyResponse(&lt;span class=&#34;string&#34;&gt;&amp;quot;\&amp;quot;Success!\&amp;quot; Took me 114514 yr 1919810 m&amp;quot;&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;).toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;response.equals(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;#123;&amp;quot;&lt;/span&gt;message&lt;span class=&#34;string&#34;&gt;&amp;quot;: &amp;quot;&lt;/span&gt;\&lt;span class=&#34;string&#34;&gt;&amp;quot;Success!\&amp;quot; Took me 114514 yr 1919810 m&amp;quot;&lt;/span&gt;, success: &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;又快又便捷，还不需要第三方类库，这就是我们的目标。&lt;/p&gt;
&lt;p&gt;那么先把这个注解写出来吧！&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; org.inlambda.kiwi.magic;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.lang.annotation.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * Classes with this type can be serialized to json by their &amp;#123;&lt;span class=&#34;doctag&#34;&gt;@link&lt;/span&gt; #toString()&amp;#125; method.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Documented&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Target(ElementType.TYPE)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;meta&#34;&gt;@interface&lt;/span&gt; Jsonized &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;值得提一点就是这些编译器注解的 &lt;code&gt;Retention&lt;/code&gt; 用 &lt;code&gt;RetentionPolicy.SOURCE&lt;/code&gt; 也是可以的，但是以后可能运行期间我们需要识别到这些被修改过的类，所以设置为 &lt;code&gt;RUNTIME&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;接着是，实现 Javac 的 &lt;code&gt;Plugin&lt;/code&gt; 接口！&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; org.inlambda.kiwi.magic.plugin;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; com.sun.source.util.Plugin;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;KiwiJavacPlugin&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Plugin&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Kiwi&amp;quot;&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 插件的名字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JavacTask task, String... args)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&#34;comment&#34;&gt;// 插件初始化回调&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Hello Kiwi&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;但是它不让你过编译。&lt;/p&gt;
&lt;h2 id=&#34;打通模块的穴位&#34;&gt;&lt;a href=&#34;#打通模块的穴位&#34; class=&#34;headerlink&#34; title=&#34;打通模块的穴位&#34;&gt;&lt;/a&gt;打通模块的穴位&lt;/h2&gt;&lt;p&gt;这怎么能忍！在默认包目录下创建一个 &lt;code&gt;module-info.java&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.cc/i1/2022/07/06/avTEyu.png&#34; alt=&#34;Package Layout&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后我们写点东西进去。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;module&lt;/span&gt; kiwi.magic.main &amp;#123; &lt;span class=&#34;comment&#34;&gt;// module 后跟模块名，下文要用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;requires&lt;/span&gt; jdk.internal.vm.compiler;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;requires&lt;/span&gt; jdk.compiler;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;requires&lt;/span&gt; java.naming;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;加入这些之后，还要配置一下构建工具的编译参数。&lt;/p&gt;
&lt;p&gt;（本教程使用 Gradle, Maven/SBT 用户请自行摸索….）&lt;/p&gt;
&lt;figure class=&#34;highlight groovy&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;compileJava &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    options.compilerArgs &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot;--add-exports=jdk.compiler/com.sun.tools.javac.tree=kiwi.magic.main&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot;--add-exports=jdk.compiler/com.sun.tools.javac.code=kiwi.magic.main&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot;--add-exports=jdk.compiler/com.sun.tools.javac.util=kiwi.magic.main&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot;--add-exports=jdk.compiler/com.sun.tools.javac.api=kiwi.magic.main&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot;--add-exports=jdk.compiler/com.sun.tools.javac.processing=kiwi.magic.main&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这样就能过编译了！虽然 IDEA 仍然会划出红线，但是只要接受他的解决方案就好（形如 &lt;code&gt;add XX to compiler option&lt;/code&gt;）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于 IDEA 可能不会自动补全没有确定模块关系的类，教程可能会大量使用完整的类名或是指向 Java SE 8 Documentation 的引用链接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;配置-Service&#34;&gt;&lt;a href=&#34;#配置-Service&#34; class=&#34;headerlink&#34; title=&#34;配置 Service&#34;&gt;&lt;/a&gt;配置 Service&lt;/h2&gt;&lt;p&gt;Javac 通过 &lt;a href=&#34;https://www.baeldung.com/java-spi&#34;&gt;Java SPI&lt;/a&gt; 发现插件，因此你需要写一个 Service 文件让他能够发现你。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;src/main/resource/META-INF/services/com.source.util.Plugin&lt;/code&gt; 中写出：&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# 填写你的插件主类名，这是教程的例子。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;org.inlambda.kiwi.magic.plugin.KiwiJavacPlugin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&#34;https://upload.cc/i1/2022/07/06/Mxt7gB.png&#34; alt=&#34;File Location&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是还差一步。&lt;/p&gt;
&lt;h2 id=&#34;加载插件&#34;&gt;&lt;a href=&#34;#加载插件&#34; class=&#34;headerlink&#34; title=&#34;加载插件&#34;&gt;&lt;/a&gt;加载插件&lt;/h2&gt;&lt;p&gt;Javac 也是一个 Java 程序，他是在他的运行时 classpath 里面寻找插件的。  &lt;/p&gt;
&lt;p&gt;而在 Gradle 中，&lt;code&gt;annotationProcessor&lt;/code&gt; 就会被加入到编译器的 classpath 中。但我们不能用 &lt;code&gt;annotationProcessor this&lt;/code&gt; ，因为 gradle 不允许，所以我们需要另外新建一个模块专门测试插件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.cc/i1/2022/07/06/dG2bf6.png&#34; alt=&#34;Module Layout&#34;&gt;&lt;/p&gt;
&lt;p&gt;为了加载插件，应当确保 &lt;code&gt;build.gradle&lt;/code&gt; 中有如下内容：&lt;/p&gt;
&lt;figure class=&#34;highlight groovy&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    testImplementation &lt;span class=&#34;string&#34;&gt;&amp;#x27;org.junit.jupiter:junit-jupiter-api:5.8.1&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    testRuntimeOnly &lt;span class=&#34;string&#34;&gt;&amp;#x27;org.junit.jupiter:junit-jupiter-engine:5.8.1&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    compileOnly(project(&lt;span class=&#34;string&#34;&gt;&amp;quot;:magic&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    annotationProcessor(project(&lt;span class=&#34;string&#34;&gt;&amp;quot;:magic&amp;quot;&lt;/span&gt;)) &lt;span class=&#34;comment&#34;&gt;// 就是这个！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;compileJava &amp;#123; options.compilerArgs &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;-Xplugin:Kiwi&amp;#x27;&lt;/span&gt; &amp;#125; &lt;span class=&#34;comment&#34;&gt;// Kiwi 是插件的名字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;万事具备，开 &lt;code&gt;assemble&lt;/code&gt; ！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.cc/i1/2022/07/06/AcTFPU.png&#34; alt=&#34;Gradle Assemble Output&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在，我们已经让 Javac 加载了我们的代码，但这仅仅是个开始。为了实现 &lt;code&gt;@Jsonized&lt;/code&gt; 的目标，我们还需要注入代码。&lt;/p&gt;
&lt;h1 id=&#34;得到编译单元&#34;&gt;&lt;a href=&#34;#得到编译单元&#34; class=&#34;headerlink&#34; title=&#34;得到编译单元&#34;&gt;&lt;/a&gt;得到编译单元&lt;/h1&gt;&lt;p&gt;对 AST 下手，首先要拿到 &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/jdk/api/javac/tree/com/sun/source/tree/CompilationUnitTree.html&#34;&gt;CompilationUnit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而 Javac 通过 &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/jdk/api/javac/tree/com/sun/source/util/TaskEvent.html&#34;&gt;TaskEvent&lt;/a&gt; 将它传递给我们，因此我们要注册一个 &lt;code&gt;com.sun.source.util.TaskListener&lt;/code&gt; 来收 &lt;code&gt;TaskEvent&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JavacTask task, String... args)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&#34;comment&#34;&gt;// 插件初始化回调&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Hello Kiwi&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    task.addTaskListener(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; KiwiTaskListener(((BasicJavacTask) task).getContext()); &lt;span class=&#34;comment&#34;&gt;// this!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;KiwiTaskListener&lt;/code&gt;: &lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; org.inlambda.kiwi.magic.plugin.jc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; com.sun.source.util.TaskEvent;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; com.sun.source.util.TaskListener;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; com.sun.tools.javac.util.Context;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;KiwiTaskListener&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TaskListener&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Context context;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;KiwiTaskListener&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Context context)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.context = context;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;started&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TaskEvent e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;finished&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TaskEvent e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (e.getKind() != TaskEvent.Kind.PARSE) &amp;#123; &lt;span class=&#34;comment&#34;&gt;// 注意此处&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; compUnit = e.getCompilationUnit();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;编译流程:&lt;br&gt;Java 编译器的几个阶段:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;COMPILATION&lt;/li&gt;
&lt;li&gt;PARSE – 构造抽象语法树 (AST)&lt;/li&gt;
&lt;li&gt;ENTER – 源码里的引用均已被解析&lt;/li&gt;
&lt;li&gt;ANALYZE – 生成 AST 并用于分析错误&lt;/li&gt;
&lt;li&gt;GENERATE – 为源码生成输出 (.class)&lt;/li&gt;
&lt;li&gt;ANNOTATION_PROCESSING - 注解处理器被唤起&lt;/li&gt;
&lt;li&gt;ANNOTATION_PROCESSING_ROUND&lt;/li&gt;
&lt;li&gt;COMPILATION&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为我们的目标是修改代码（对编译器来说，也就是对抽象语法树下手），所以只需要关心 PARSE 阶段就好了。&lt;br&gt;如果你对 “AST” 和 “PARSE” 的概念还不太了解，那么你可以先看看我的&lt;a href=&#34;./Writting-A-Compiler-1.md&#34;&gt;另一篇博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;获取-AST&#34;&gt;&lt;a href=&#34;#获取-AST&#34; class=&#34;headerlink&#34; title=&#34;获取 AST&#34;&gt;&lt;/a&gt;获取 AST&lt;/h2&gt;&lt;p&gt;得到 &lt;code&gt;CompilationUnit&lt;/code&gt; 后，我们便可以&lt;a href=&#34;https://refactoringguru.cn/design-patterns/visitor&#34;&gt;“访问”&lt;/a&gt;到对应的 &lt;code&gt;class&lt;/code&gt; 了。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; org.inlambda.kiwi.magic.plugin.jc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; com.sun.source.tree.ClassTree;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; com.sun.source.util.TreeScanner;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; com.sun.tools.javac.tree.JCTree; &lt;span class=&#34;comment&#34;&gt;//注意这些完整类名，如果你的 IDEA 补全不了尝试复制这些到 IDEA 里面去。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; com.sun.tools.javac.tree.TreeMaker; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; com.sun.tools.javac.util.Context;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; com.sun.tools.javac.util.Names;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.inlambda.kiwi.magic.plugin.gens.GenJsonToString;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;JsonizedTreeScanner&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TreeScanner&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;Void&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;Context&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Void &lt;span class=&#34;title&#34;&gt;visitClass&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ClassTree node, Context ctx)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&#34;comment&#34;&gt;// 此处 Context 是类型参数里规定的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; maker = TreeMaker.instance(ctx); &lt;span class=&#34;comment&#34;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; name = Names.instance(ctx); &lt;span class=&#34;comment&#34;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; claz = (JCTree.JCClassDecl) node; &lt;span class=&#34;comment&#34;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (node.getModifiers()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .getAnnotations()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .stream()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .anyMatch(e -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    e.getAnnotationType()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        .toString()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        .equals(&lt;span class=&#34;string&#34;&gt;&amp;quot;Jsonized&amp;quot;&lt;/span&gt;))) &amp;#123; &lt;span class=&#34;comment&#34;&gt;// 判断是否有 Jsonized&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Jsonized class found: &amp;quot;&lt;/span&gt; + node.getSimpleName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;super&lt;/span&gt;.visitClass(node, ctx);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Throwable t) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.err.println(t.getMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (StackTraceElement stackTraceElement : t.getStackTrace()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.out.println(stackTraceElement); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// Javac 会屏蔽掉正常的报错输出，因此需要手动打印出来。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;super&lt;/span&gt;.visitClass(node, ctx);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;接下来逐个讲解这些代码。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;TreeMaker&lt;/strong&gt; 是一个非常重要的组件，通过 &lt;code&gt;TreeMaker&lt;/code&gt; 我们可以创建语法树的组件然后把它们插入到现有的语法树里，也就是修改代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Names&lt;/strong&gt; 也是一个重要组件，因为它几乎就是符号表，虽然其本身是 &lt;code&gt;Identifier&lt;/code&gt; ….。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;JCTree.JCClassDecl&lt;/code&gt; 就是类在AST中的定义，我们接下来会讲解到它以及更多 &lt;code&gt;JCTree&lt;/code&gt; 子类的应用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;同时，我们在 &lt;code&gt;magic-test&lt;/code&gt; 模块中创建一个类用于测试 &lt;code&gt;@Jsonized&lt;/code&gt;，但为了节约篇幅，类的代码不列出。&lt;/p&gt;
&lt;p&gt;让我们的访客访问 &lt;code&gt;CompilationUnit&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;finished&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TaskEvent e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (e.getKind() != TaskEvent.Kind.PARSE) &amp;#123; &lt;span class=&#34;comment&#34;&gt;// 注意此处&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; compUnit = e.getCompilationUnit();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    compUnit.accept(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; JsonizedTreeScanner(), context); &lt;span class=&#34;comment&#34;&gt;// 此处 context 是上文类构造器依赖注入进来的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;尝试编译 &lt;code&gt;magic-test&lt;/code&gt;，你应当能在 &lt;code&gt;compileJava&lt;/code&gt; 阶段看到 &lt;code&gt;Jsonized class found: XXX&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&#34;对-AST-动手动脚&#34;&gt;&lt;a href=&#34;#对-AST-动手动脚&#34; class=&#34;headerlink&#34; title=&#34;对 AST 动手动脚&#34;&gt;&lt;/a&gt;对 AST 动手动脚&lt;/h1&gt;&lt;p&gt;&lt;em&gt;哎呀，你怎么动手动脚的！&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;拿到了类定义，我们就可以访问类里的所有元素了！另外，&lt;code&gt;JCTree&lt;/code&gt; 的子类通常是可以&lt;em&gt;直接 toString()&lt;/em&gt; 出来的，你可以利用这一点查看编译的输出。&lt;/p&gt;
&lt;p&gt;但在修改之前，得先了解一下 Javac 内部的 List 实现。&lt;/p&gt;
&lt;h2 id=&#34;List-in-Javac&#34;&gt;&lt;a href=&#34;#List-in-Javac&#34; class=&#34;headerlink&#34; title=&#34;List in Javac&#34;&gt;&lt;/a&gt;List in Javac&lt;/h2&gt;&lt;p&gt;Javac 不知道出于什么缘故，他自己有一个链表（&lt;code&gt;com.sun.tools.javac.util.List&amp;lt;A&amp;gt;&lt;/code&gt;）的实现，而且他是不可变的。&lt;/p&gt;
&lt;p&gt;这个链表不对外公开（因为 Oracle 官方网站也没有 Javadoc），所以不提供引用链接了。&lt;/p&gt;
&lt;p&gt;此处介绍几个常用的方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;List.nil()&lt;br&gt;静态方法。顾名思义，空集。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;List.of(A x1, A x2, A x3, A… rest)&lt;br&gt;一个静态工厂，用于创建一个定长的 List.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一些类似 &lt;code&gt;prepend&lt;/code&gt; 和 &lt;code&gt;append&lt;/code&gt; 这样对元素操作的方法…&lt;br&gt;他们都返回新的实例，因为 &lt;code&gt;List&amp;lt;A&amp;gt;&lt;/code&gt; 是不可变的，小心别被坑了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等等，那不定长的呢？于是我们还有一个类，他就是 &lt;code&gt;com.sun.tools.javac.util.ListBuffer&amp;lt;A&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ListBuffer&amp;lt;A&amp;gt;&lt;/code&gt; 是 &lt;code&gt;List&amp;lt;A&amp;gt;&lt;/code&gt; 某种类似 &lt;a href=&#34;https://refactoringguru.cn/design-patterns/builder&#34;&gt;Builder&lt;/a&gt; 的工具，他的 &lt;code&gt;append&lt;/code&gt; 等方法始终返回他自己，用完之后可以 &lt;code&gt;toList()&lt;/code&gt; 转换成 &lt;code&gt;List&amp;lt;A&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;做好这些基础知识的准备工作，我们终于，终于，终于可以开始动工了。&lt;/p&gt;
&lt;h2 id=&#34;访问类里的元素&#34;&gt;&lt;a href=&#34;#访问类里的元素&#34; class=&#34;headerlink&#34; title=&#34;访问类里的元素&#34;&gt;&lt;/a&gt;访问类里的元素&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://upload.cc/i1/2022/07/06/tQ4Xlz.png&#34; alt=&#34;Methods of JCClassDecl&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JCClassDecl&lt;/code&gt; 并没有严格区分开来方法和字段，他们都是 &lt;code&gt;member&lt;/code&gt;。然而 &lt;code&gt;getMembers()&lt;/code&gt; 是只读的（因为 &lt;code&gt;List&amp;lt;A&amp;gt;&lt;/code&gt; 不可变），所以我们要绕开 &lt;code&gt;getMembers()&lt;/code&gt; 直接访问到后面的字段。&lt;/p&gt;
&lt;p&gt;绕也很简单…&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.cc/i1/2022/07/06/7hlANk.png&#34; alt=&#34;field defs&#34;&gt;&lt;/p&gt;
&lt;p&gt;没想到吧，Javac 里面就是这么乱。&lt;/p&gt;
&lt;p&gt;接下来往 &lt;code&gt;defs&lt;/code&gt; 里面插入方法即可。&lt;/p&gt;
&lt;h2 id=&#34;构造方法然后插进去！&#34;&gt;&lt;a href=&#34;#构造方法然后插进去！&#34; class=&#34;headerlink&#34; title=&#34;构造方法然后插进去！&#34;&gt;&lt;/a&gt;构造方法然后插进去！&lt;/h2&gt;&lt;p&gt;这里我们就要请出刚刚提到过的大名鼎鼎的 &lt;code&gt;TreeMaker&lt;/code&gt; 了！ 方法定义在 Javac 中就是 &lt;code&gt;com.sun.tools.javac.tree.JCTree.MethodDecl&lt;/code&gt;，可以通过 &lt;code&gt;TreeMaker#MethodDef&lt;/code&gt; 构造。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 建议把生成方法单独放起来&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; JCTree.&lt;span class=&#34;function&#34;&gt;JCMethodDecl &lt;span class=&#34;title&#34;&gt;genMethod&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TreeMaker maker, Names symbolTable, JCTree.JCClassDecl claz)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; method = maker.at(claz.pos).MethodDef( &lt;span class=&#34;comment&#34;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            maker.Modifiers(Flags.PUBLIC | Flags.FINAL), &lt;span class=&#34;comment&#34;&gt;// 方法的修饰符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            symbolTable.fromString(&lt;span class=&#34;string&#34;&gt;&amp;quot;toString&amp;quot;&lt;/span&gt;), &lt;span class=&#34;comment&#34;&gt;// 2 方法的名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            maker.Ident(symbolTable.fromString(&lt;span class=&#34;string&#34;&gt;&amp;quot;String&amp;quot;&lt;/span&gt;)), &lt;span class=&#34;comment&#34;&gt;// 3 返回值类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            List.nil(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            List.nil(), &lt;span class=&#34;comment&#34;&gt;// 这三个先忽略再说&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            List.nil(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            maker.Block(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, makeReturnJsonExpress(maker, symbolTable, claz)) &lt;span class=&#34;comment&#34;&gt;// 方法体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            , &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; method;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;是不是有些迷糊？我们”娓娓道来”…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;at(claz.pos).MethodDef(&lt;/code&gt;&lt;br&gt; 这句的意思是把 &lt;code&gt;TreeMaker&lt;/code&gt; 当前的位置调整到目标类上然后再创建一个方法定义，不然可能会把方法生成到别的地方。（不过我没试过，其实方法和类关系是比较确定的，所以这个 &lt;code&gt;pos&lt;/code&gt; 可能是给语句用的，因为语句有顺序。）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;symbolTable.fromString(&amp;quot;toString&amp;quot;)&lt;/code&gt;&lt;br&gt; &lt;code&gt;Names&lt;/code&gt; 提供了 &lt;code&gt;fromString&lt;/code&gt; 方法用来创建对应的标识符/名字（Identifier）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maker.Ident&lt;/code&gt;&lt;br&gt; &lt;code&gt;Ident&lt;/code&gt; 是一个很常用的方法，他可以接受一个 &lt;code&gt;Names&lt;/code&gt; 然后输出一个 &lt;code&gt;JCIdent&lt;/code&gt;。&lt;br&gt; 而 &lt;code&gt;JCIdent&lt;/code&gt; 恰好是 &lt;code&gt;JCExpression&lt;/code&gt;，也就是 &lt;code&gt;JCTree&lt;/code&gt; 的子类。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意，从符号表拿类型并不需要把命名写完整（就好像上文写的不是 java.lang.String），如果要引入外部的类型只需要 &lt;code&gt;maker.Import&lt;/code&gt; 即可&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如：&lt;code&gt;maker.Import(maker.Ident(names.fromString(&amp;quot;java.util.Objects&amp;quot;)).getTree(), false);&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这还只是方法的基本信息，接下来是方法体，也就是最关键的那部分。&lt;/p&gt;
&lt;p&gt;但在写输出 Json 之前，我们不妨先写个 &lt;code&gt;HelloWorld&lt;/code&gt; 试试。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; List&amp;lt;JCTree.JCStatement&amp;gt; makeReturnJsonExpress(TreeMaker maker, Names name, JCTree.JCClassDecl claz) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; List.of(maker.Return(maker.Literal(&lt;span class=&#34;string&#34;&gt;&amp;quot;Hello Jsonized!&amp;quot;&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后我们回到上文，把新的方法体插入到类里。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; claz = (JCTree.JCClassDecl) node;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (node.getModifiers().getAnnotations().stream().anyMatch(e -&amp;gt; e.getAnnotationType().toString().equals(&lt;span class=&#34;string&#34;&gt;&amp;quot;Jsonized&amp;quot;&lt;/span&gt;))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Jsonized class found: &amp;quot;&lt;/span&gt; + node.getSimpleName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        claz.def = claz.def.append(genMethod(maker,name,claz)); &lt;span class=&#34;comment&#34;&gt;// THIS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;super&lt;/span&gt;.visitClass(node, ctx);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Throwable t) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.err.println(t.getMessage());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;尝试编译 &lt;code&gt;magic-test&lt;/code&gt; 模块并且查看编译输出，如果你没有干坏事的话应该能看到 &lt;code&gt;@Jsonized&lt;/code&gt; 标注过的类里多出来一个 &lt;code&gt;public final String toString()&lt;/code&gt;，并且代码体正是 &lt;code&gt;return &amp;quot;Hello Jsonized!&amp;quot;;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.cc/i1/2022/07/06/AMR7Q0.png&#34; alt=&#34;Decompiler Output&#34;&gt;&lt;br&gt;&lt;em&gt;(由于我的 Jsonized 用的是 &lt;code&gt;RetentionPolicy.SOURCE&lt;/code&gt;，所以注解编译后就被抹除掉了)&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;AST-的常用姿势&#34;&gt;&lt;a href=&#34;#AST-的常用姿势&#34; class=&#34;headerlink&#34; title=&#34;AST 的常用姿势&#34;&gt;&lt;/a&gt;AST 的常用姿势&lt;/h1&gt;&lt;p&gt;到上一节，你已经成功的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;让 Javac 加载你的代码&lt;/li&gt;
&lt;li&gt;对特定注解标志过的类添加代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么这一节，我们着重讲解一些常用的操作以及更多基础知识。&lt;/p&gt;
&lt;h2 id=&#34;从获取字段开始&#34;&gt;&lt;a href=&#34;#从获取字段开始&#34; class=&#34;headerlink&#34; title=&#34;从获取字段开始&#34;&gt;&lt;/a&gt;从获取字段开始&lt;/h2&gt;&lt;p&gt;为了序列化出所有字段，我们首先需要知道我们的类里有哪些字段。&lt;/p&gt;
&lt;p&gt;幸好，使用 &lt;code&gt;Stream&lt;/code&gt; 就可以很轻松地做到这件事:  &lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; nameToVar = claz.getMembers().stream()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .filter(e -&amp;gt; e.getKind() == Tree.Kind.VARIABLE) &lt;span class=&#34;comment&#34;&gt;// 其实这个可能可以省略&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .filter(e -&amp;gt; e &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; JCTree.JCVariableDecl)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .map(e -&amp;gt; (JCTree.JCVariableDecl) e)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .collect(Collectors.toMap(e -&amp;gt; e.getName(), e -&amp;gt; e.getType()));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;产出一个 &lt;code&gt;Map&amp;lt;Names, JCTree&amp;gt;&lt;/code&gt;。&lt;code&gt;JCTree&lt;/code&gt; 就是类定义，此处为 &lt;code&gt;JCVariableDecl&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;有了这样一个 nameToVar 之后，我们就可以构造 Json 了。&lt;/p&gt;
&lt;h2 id=&#34;拼接字符串与二元表达式&#34;&gt;&lt;a href=&#34;#拼接字符串与二元表达式&#34; class=&#34;headerlink&#34; title=&#34;拼接字符串与二元表达式&#34;&gt;&lt;/a&gt;拼接字符串与二元表达式&lt;/h2&gt;&lt;p&gt;&lt;em&gt;哪个男孩不想体验一下二元运算符呢？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.cc/i1/2022/07/06/bYdHB3.png&#34; alt=&#34;Figure: Binary Operator&#34;&gt;&lt;/p&gt;
&lt;p&gt;“+” 是一个二元运算符，它接受两个参数: &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 并且残出一个结果。&lt;/p&gt;
&lt;p&gt;在 Java 里，我们是这样写的：&lt;code&gt;a + b&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;那么如果更多参数呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.cc/i1/2022/07/06/8xWLDn.png&#34; alt=&#34;Figure: Complexier Binary Tree&#34;&gt;&lt;/p&gt;
&lt;p&gt;以此类推，可以构造出一个很长很长的二元树，而这正好是我们今天要做的事情。  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;先从拼接字符串开始，举个例子：&lt;code&gt;a + &amp;quot;literal&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果我们要让一个命名 &lt;code&gt;a&lt;/code&gt; 和一个字面量（&lt;code&gt;&amp;quot;literal&amp;quot;&lt;/code&gt;）相加，要怎么做呢？其实很简单：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;JCTree.JCBinary binary = maker.Binary(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    JCTree.Tag.PLUS,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     maker.Ident(names.fromString(&lt;span class=&#34;string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;)),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      maker.Literal(&lt;span class=&#34;string&#34;&gt;&amp;quot;literal&amp;quot;&lt;/span&gt;)); &lt;span class=&#34;comment&#34;&gt;// 此处 PLUS 为运算符 &amp;quot;+&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&#34;https://upload.cc/i1/2022/07/06/uf4SRB.png&#34; alt=&#34;Figure: Explaination of Java Code&#34;&gt;&lt;/p&gt;
&lt;p&gt;回过头来，我们拼接 Json 的代码应该是这样的：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;\&amp;quot;success\&amp;quot;:&amp;quot;&lt;/span&gt;+ success +&lt;span class=&#34;string&#34;&gt;&amp;quot;,\&amp;quot;response\&amp;quot;:+&amp;quot;&lt;/span&gt; response &lt;span class=&#34;string&#34;&gt;&amp;quot;+&amp;#125;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;也就是:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.cc/i1/2022/07/06/AcwJkP.png&#34; alt=&#34;Figure: Example of Json Concatenating&#34;&gt;&lt;/p&gt;
&lt;p&gt;不难看出，到最后这些拼接代码都会被聚合成一个 &lt;code&gt;JCBinary&lt;/code&gt;。通过这个性质，我们可以使用 &lt;code&gt;Stream#reduce&lt;/code&gt; 来把众多元素聚合成一个 &lt;code&gt;JCBinary&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;此处贴出完整的 &lt;code&gt;makeReturnJsonExpress&lt;/code&gt; 以供参考。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; List&amp;lt;JCTree.JCStatement&amp;gt; makeReturnJsonExpress(TreeMaker maker, Names name, JCTree.JCClassDecl claz) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; json = claz.getMembers().stream()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .filter(e -&amp;gt; e.getKind() == Tree.Kind.VARIABLE)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .filter(e -&amp;gt; e &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; JCTree.JCVariableDecl)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .map(e -&amp;gt; (JCTree.JCVariableDecl) e)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .collect(Collectors.toMap(e -&amp;gt; e.getName(), e -&amp;gt; e.getType()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; list = json.entrySet().stream()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .map(e -&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            maker.Binary(JCTree.Tag.PLUS, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                maker.Literal(&lt;span class=&#34;string&#34;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt; + e.getKey() + &lt;span class=&#34;string&#34;&gt;&amp;quot;\&amp;quot;:&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                maker.Ident(e.getKey()) &lt;span class=&#34;comment&#34;&gt;// 引用字段名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ).reduce((e1, e2) -&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                maker.Binary(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    JCTree.Tag.PLUS, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    e1, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    maker.Binary(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        JCTree.Tag.PLUS, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        maker.Literal(&lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        e2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .orElseThrow();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    list = maker.Binary(JCTree.Tag.PLUS, maker.Literal(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;&amp;quot;&lt;/span&gt;), list);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    list = maker.Binary(JCTree.Tag.PLUS, list, maker.Literal(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#125;&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; List.of(maker.Return(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            list&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;至此，我们的 &lt;code&gt;@Jsonized&lt;/code&gt; 生成的 &lt;code&gt;toString&lt;/code&gt; 已经可以处理简单情况了。&lt;/p&gt;
&lt;h2 id=&#34;调用方法&#34;&gt;&lt;a href=&#34;#调用方法&#34; class=&#34;headerlink&#34; title=&#34;调用方法&#34;&gt;&lt;/a&gt;调用方法&lt;/h2&gt;&lt;p&gt;但是游戏还没结束，你很快会发现一个问题…. 如果数据里存有特殊字符，例如 &lt;code&gt;&amp;quot;&lt;/code&gt; 那就出事了！因此，要给字符串加一些特殊处理。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;\&amp;quot;success\&amp;quot;:&amp;quot;&lt;/span&gt;+ success +&lt;span class=&#34;string&#34;&gt;&amp;quot;,\&amp;quot;response\&amp;quot;:+&amp;quot;&lt;/span&gt; response.replaceAll(&lt;span class=&#34;string&#34;&gt;&amp;quot;\\\&amp;quot;&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;\\\\\&amp;quot;&amp;quot;&lt;/span&gt;) &lt;span class=&#34;string&#34;&gt;&amp;quot;+&amp;#125;&amp;quot;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// 拼接的时候把 &amp;quot; 替换为 \&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;也就是说，我们要对 &lt;code&gt;response&lt;/code&gt; 进行方法调用。那么，先引入一个新方法吧！&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; JCTree.&lt;span class=&#34;function&#34;&gt;JCExpression &lt;span class=&#34;title&#34;&gt;processValue&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(JCTree value, Name name, TreeMaker maker, Names names)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; typeName = value.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (typeName) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;String&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;CharSequence&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;StringBuilder&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;StringBuffer&amp;quot;&lt;/span&gt;: &lt;span class=&#34;comment&#34;&gt;// 一切可以 toString 的...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; toS = maker.Exec(maker.Apply(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    List.nil(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    maker.Select(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            maker.Ident(name),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            names.fromString(&lt;span class=&#34;string&#34;&gt;&amp;quot;toString&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    List.nil()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; replaced = maker.Exec( &lt;span class=&#34;comment&#34;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    maker.Apply( &lt;span class=&#34;comment&#34;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            List.nil(), &lt;span class=&#34;comment&#34;&gt;// 类型参数，就是方法的泛型，不多过关心&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            maker.Select( &lt;span class=&#34;comment&#34;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                    toS.expr,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                    names.fromString(&lt;span class=&#34;string&#34;&gt;&amp;quot;replaceAll&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            List.of( &lt;span class=&#34;comment&#34;&gt;// 方法参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                    maker.Literal(&lt;span class=&#34;string&#34;&gt;&amp;quot;\\\&amp;quot;&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                    maker.Literal(&lt;span class=&#34;string&#34;&gt;&amp;quot;\\\\\&amp;quot;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; maker.Binary(JCTree.Tag.PLUS, maker.Literal(&lt;span class=&#34;string&#34;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    maker.Binary(JCTree.Tag.PLUS, replaced.expr, maker.Literal(&lt;span class=&#34;string&#34;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; maker.Ident(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;写这篇博文的时候我还没有去深究具体要怎么获取到 &lt;code&gt;JCVariable&lt;/code&gt; 的类型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还是老样子，逐步解释代码：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Exec&lt;/code&gt; 执行的意思，这里可以传入一个 &lt;code&gt;JCExpression&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Apply&lt;/code&gt; 返回一个 &lt;code&gt;JCMethodInvocation&lt;/code&gt;，正是我们要的东西&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Select&lt;/code&gt; 返回一个 &lt;code&gt;JCFieldAccess&lt;/code&gt;，而参数是发起操作的对象和他对应的方法/字段（瞎猜的）&lt;br&gt;当然这里你也可以用 &lt;code&gt;maker.Ident(name)&lt;/code&gt; 来代替 &lt;code&gt;Select&lt;/code&gt;，也就是直接对 name 对应的对象发起动作。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;之后再修改一下之前的代码：&lt;/p&gt;
&lt;figure class=&#34;highlight patch&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;                .map(e -&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                maker.Binary(JCTree.Tag.PLUS, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    maker.Literal(&amp;quot;\&amp;quot;&amp;quot; + e.getKey() + &amp;quot;\&amp;quot;:&amp;quot;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;deletion&#34;&gt;-                   maker.Ident(e.getKey()) // 引用字段名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;addition&#34;&gt;+                   processValue(e.getValue(), e.getKey(), maker, name)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ).reduce((e1, e2) -&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;大功告成。现在你已经得到了一个可以处理 &lt;code&gt;String/CharSequence/StringBuilder/StringBuffer&lt;/code&gt; 里的转义问题（当然，只限于双引号）的编译期序列化 Json 的编译器插件了！&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一种更好的做法: 委托&lt;br&gt;与其这样大费周章的在编译器完成这些工作，倒不如再带几个类进去然后委托到类上的静态方法进行转换。&lt;br&gt;这样做的好处有很多，例如无需重新编译这些 &lt;code&gt;class&lt;/code&gt; , 例如可以通过代码编写更灵活的转换机制… 等等。实际上，Java 14+ 中 Record 的 &lt;code&gt;equals&lt;/code&gt; 正是通过 &lt;code&gt;INVOKEDYNAMIC&lt;/code&gt; 委托到别处比较实现的，并且高版本 Java 中 String 类型的拼接也使用了委托。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;附：使用注解处理器&#34;&gt;&lt;a href=&#34;#附：使用注解处理器&#34; class=&#34;headerlink&#34; title=&#34;附：使用注解处理器&#34;&gt;&lt;/a&gt;附：使用注解处理器&lt;/h1&gt;&lt;p&gt;除了直接编写 Javac 插件，我们还有另外一种做法，就是 &lt;code&gt;Annotation Processor&lt;/code&gt;，注解处理器。&lt;/p&gt;
&lt;p&gt;比起 Javac 插件，它的局限较高，但是用起来会方便一点&lt;del&gt;因为不用加那个”-Xplugin”的编译器 参数&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;所以这里简单介绍一下如何使用注解处理器访问 AST。类似 &lt;code&gt;Plugin&lt;/code&gt;，你需要先继承一个 &lt;code&gt;AbstractProcessor&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; org.inlambda.kiwi.magic.plugin;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; com.sun.source.util.Trees;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; com.sun.tools.javac.tree.JCTree;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; com.sun.tools.javac.tree.TreeMaker;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; com.sun.tools.javac.util.Context;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; com.sun.tools.javac.util.Names;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.inlambda.kiwi.magic.Jsonized;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.inlambda.kiwi.magic.NoNullExcepted;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.inlambda.kiwi.magic.plugin.gens.GenJsonToString;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.inlambda.kiwi.magic.plugin.gens.GenNoNull;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; javax.annotation.processing.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; javax.lang.model.SourceVersion;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; javax.lang.model.element.Element;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; javax.lang.model.element.TypeElement;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.util.Set;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@SupportedAnnotationTypes(&amp;quot;*&amp;quot;)&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// 表示处理任意元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@SupportedSourceVersion(SourceVersion.RELEASE_11)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;KiwiAnnotationProcessor&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AbstractProcessor&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Context context;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Trees trees; &lt;span class=&#34;comment&#34;&gt;// 注意这里还有个 Trees&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; TreeMaker maker;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Names names;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ProcessingEnvironment processingEnv)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;super&lt;/span&gt;.init(processingEnv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        trees = Trees.instance(processingEnv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; f = processingEnv.getClass().getDeclaredField(&lt;span class=&#34;string&#34;&gt;&amp;quot;context&amp;quot;&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// 得到 context&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            f.setAccessible(&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            context = (Context) f.get(processingEnv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            maker = TreeMaker.instance(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            names = Names.instance(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (NoSuchFieldException | IllegalAccessException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; RuntimeException(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后一样在 &lt;code&gt;META-INF/services/javax.annotation.processing.Processor&lt;/code&gt; 里写上你的类名，注意是 &lt;code&gt;Processor&lt;/code&gt; 而不是 &lt;code&gt;AbstractProcessor&lt;/code&gt; …&lt;/p&gt;
&lt;p&gt;拿到 &lt;code&gt;TreeMaker&lt;/code&gt;, &lt;code&gt;Context&lt;/code&gt;，&lt;code&gt;Trees&lt;/code&gt; 和 &lt;code&gt;Names&lt;/code&gt; 之后就好办很多了，接下来的问题是怎么获取到 AST。&lt;/p&gt;
&lt;p&gt;好在 Annotation Processor API 允许我们处理所有元素而不只是规定的几个注解标注过的元素，我们可以在 &lt;code&gt;boolean process(...)&lt;/code&gt; 方法中访问到所有我们要的元素（前提是 &lt;code&gt;@SupportedAnnotationTypes(&amp;quot;*&amp;quot;)&lt;/code&gt; ）：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Set&amp;lt;? extends TypeElement&amp;gt; annotations, RoundEnvironment roundEnv)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (TypeElement annotation : annotations) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (annotation.getQualifiedName().contentEquals(Jsonized.class.getName())) &amp;#123; &lt;span class=&#34;comment&#34;&gt;// 先判断这个注解是不是我们的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (Element element : roundEnv.getElementsAnnotatedWith(annotation)) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;//接着可以拿到注解标注过的所有元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 因为我们的注解 Target 是 TYPE，所以只能在类上。这里直接强转成 JCClassDecl 即可。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 通过 Trees 得到它对应的 AST 元素。这里的 element 实际上是个 ClassSymbol&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; jtree = (JCTree.JCClassDecl) trees.getTree(element);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; method = GenJsonToString.genMethod(maker, names, jtree); &lt;span class=&#34;comment&#34;&gt;// 似曾相似的套路，这就是我什么推荐你单独放....&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                jtree.defs = jtree.defs.append(method);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;That’s it!&lt;/em&gt; 其实这种需求用注解处理器的话似乎比直接写 Javac 插件还要简单一些？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意: 注解处理器不能和 javac 插件混着用，而且在 gradle 中，他们似乎是在不同的环境里被加载的。（也就是你无法通过静态字段传递加载信息来判断用户想用的是插件还是注解处理器）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;End-结语&#34;&gt;&lt;a href=&#34;#End-结语&#34; class=&#34;headerlink&#34; title=&#34;End / 结语&#34;&gt;&lt;/a&gt;End / 结语&lt;/h1&gt;&lt;p&gt;本文简要介绍了 javac 闭包 API 的基本使用以及一种使用注解处理器访问 javac AST 的方法。&lt;/p&gt;
&lt;p&gt;不过需要注意的是，虽然这些 API 自从 1.8 加入以来就没怎么变过（应该？），他们仍然是&lt;strong&gt;不稳定，不安全，无保障&lt;/strong&gt;的。因此，若要使用，请总是进行单元测试并且尝试检查版本兼容性。&lt;/p&gt;
&lt;p&gt;本篇博客的所有代码均为 &lt;a href=&#34;https://codeberg.org/InlinedLambdas/Kiwi&#34;&gt;Kiwi&lt;/a&gt; 项目的一部分，Kiwi 以 MIT 协议开源，如果你想 Star 但是没有 Codeberg 帐号的话可以去 GitHub 上的&lt;a href=&#34;https://github.com/InlinedLambdas/kiwi&#34;&gt;镜像&lt;/a&gt; (疯狂暗示)&lt;/p&gt;
&lt;p&gt;文章可能有偏差，可以在评论区指正。&lt;/p&gt;
&lt;p&gt;End.&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
