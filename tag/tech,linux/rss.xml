<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>nstd::out • Posts by &#34;tech,linux&#34; tag</title>
        <link>https://nstd.sfclub.cc</link>
        <description>iceBear 的博客</description>
        <language>zh-CN</language>
        <pubDate>Sat, 13 Mar 2021 22:57:30 +0800</pubDate>
        <lastBuildDate>Sat, 13 Mar 2021 22:57:30 +0800</lastBuildDate>
        <category>tech,linux</category>
        <item>
            <guid isPermalink="true">https://nstd.sfclub.cc/2021/03/13/%E4%BD%BF%E7%94%A8-cproxy-%E5%AF%B9%E7%A8%8B%E5%BA%8F%E8%BF%9B%E8%A1%8C%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86/</guid>
            <title>使用 cproxy 对程序进行透明代理</title>
            <link>https://nstd.sfclub.cc/2021/03/13/%E4%BD%BF%E7%94%A8-cproxy-%E5%AF%B9%E7%A8%8B%E5%BA%8F%E8%BF%9B%E8%A1%8C%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86/</link>
            <category>tech,linux</category>
            <pubDate>Sat, 13 Mar 2021 22:57:30 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;在 Windows 下，说到 &lt;code&gt;透明代理&lt;/code&gt; ，你可能会想到 &lt;code&gt;Proxifier&lt;/code&gt; , &lt;code&gt;SSTap&lt;/code&gt;, &lt;code&gt;Mellow&lt;/code&gt;&lt;br&gt;但在 Linux 下，你可能会想到 &lt;code&gt;proxychains&lt;/code&gt; 然后再想到 &lt;code&gt;proxychains&lt;/code&gt; 不能代理 static-linked 的程序。  &lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h1 id=&#34;为什么-ProxyChains-NG-不能代理静态连接的程序&#34;&gt;&lt;a href=&#34;#为什么-ProxyChains-NG-不能代理静态连接的程序&#34; class=&#34;headerlink&#34; title=&#34;为什么 ProxyChains(NG) 不能代理静态连接的程序&#34;&gt;&lt;/a&gt;为什么 ProxyChains(NG) 不能代理静态连接的程序&lt;/h1&gt;&lt;p&gt;ProxyChains NG 通过一个预加载的共享库来hook到网络相关的函数(比如: connect,getaddrinfo)上，接着他就可以转发这些流量。&lt;br&gt;缺点似乎显而易见，如果只是通过 &lt;a href=&#34;https://stackoverflow.com/questions/426230/what-is-the-ld-preload-trick&#34;&gt;LD_PRELOAD&lt;/a&gt; 来进行透明代理，那么这招对于静态连接的程序是无用的（比如说 Go 程序..)&lt;br&gt;其次，ProxyChains 只支持 TCP，这可能导致无法转发 DNS 流量 -&amp;gt; DNS 流量泄漏。  &lt;/p&gt;
&lt;h1 id=&#34;cproxy-是什么&#34;&gt;&lt;a href=&#34;#cproxy-是什么&#34; class=&#34;headerlink&#34; title=&#34;cproxy 是什么&#34;&gt;&lt;/a&gt;cproxy 是什么&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/NOBLES5E/cproxy&#34;&gt;cproxy&lt;/a&gt; 也是透明代理，作用和 proxychains 类似。&lt;br&gt;原理上与 proxychains 不同，它使用 &lt;code&gt;cgroup&lt;/code&gt; 进行对程序的代理 &lt;del&gt;，不过配置起来还有点麻烦&lt;/del&gt;&lt;br&gt;本文将会教您在您的Linux PC上使用 cproxy，截至本文发布之前，cproxy似乎只支持 Linux。  &lt;/p&gt;
&lt;h2 id=&#34;下载-cproxy&#34;&gt;&lt;a href=&#34;#下载-cproxy&#34; class=&#34;headerlink&#34; title=&#34;下载 cproxy&#34;&gt;&lt;/a&gt;下载 cproxy&lt;/h2&gt;&lt;p&gt;官方推荐的方法是: 直接用 &lt;code&gt;cargo&lt;/code&gt;   &lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cargo install cproxy&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;```  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;如果没有 cargo 可以在 [Release](https://github.com/NOBLES5E/cproxy/releases) 上下载压缩包。  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解压压缩包，可能会发现有两个可执行文件，不过似乎只留一个就好了。  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;## 安装 cproxy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;先来试一试 cproxy！&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;```bash&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cproxy --port &amp;lt;本地代理端口&amp;gt; -- curl ip.sb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;( ｀д′) 失败了&lt;br&gt;如果你和我一样，在port上写了 socks5 的代理端口，那么你就被坑了。&lt;br&gt;笔者填入 geph 的 HTTP 代理端口时是可以成功的，但是使用 v2ray 的s5/http端口都无法使用。&lt;br&gt;这是因为 cproxy 需要&lt;a href=&#34;https://github.com/NOBLES5E/cproxy/wiki/Example-setup-with-V2Ray&#34;&gt;修改 v2ray 的配置&lt;/a&gt;进行兼容，&lt;a href=&#34;https://github.com/zfl9/ipt2socks&#34;&gt;如果你不想去改配置&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;在确保可以使用 cproxy 后，我们来配置 &lt;code&gt;alias&lt;/code&gt;。&lt;br&gt;将以下内容写到 &lt;code&gt;~/.bashrc&lt;/code&gt;，记得自己修改一些部分。  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;alias &amp;quot;px&amp;quot;=&amp;quot;/path/to/cproxy --port &amp;lt;your-local-proxy-port&amp;gt; --&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例如我的配置：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;alias &amp;quot;px&amp;quot;=&amp;quot;/bin/cproxy --port 60080 --use-tproxy -- &amp;quot; # 60080 是ipt2socks的默认监听端口。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;保存后，使用 &lt;code&gt;source ~/.bashrc&lt;/code&gt; 载入，试试 &lt;code&gt;px curl ip.sb&lt;/code&gt;，看看是否成功。  &lt;/p&gt;
&lt;h2 id=&#34;缺陷&#34;&gt;&lt;a href=&#34;#缺陷&#34; class=&#34;headerlink&#34; title=&#34;缺陷&#34;&gt;&lt;/a&gt;缺陷&lt;/h2&gt;&lt;p&gt;每次使用都要 sudo ，还是挺烦人的吧…&lt;br&gt;对于这种情况，也可以考虑使用有后台常驻的 &lt;a href=&#34;https://github.com/springzfx/cgproxy&#34;&gt;cgproxy&lt;/a&gt;，但本文不做介绍，有兴趣可以自己了解。  &lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
