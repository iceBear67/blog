<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>nstd::out • Posts by &#34;guide&#34; tag</title>
        <link>https://ib67.io</link>
        <description>iceBear 的博客</description>
        <language>zh-CN</language>
        <pubDate>Mon, 19 Dec 2022 21:20:35 +0800</pubDate>
        <lastBuildDate>Mon, 19 Dec 2022 21:20:35 +0800</lastBuildDate>
        <category>compiler</category>
        <category>tech</category>
        <category>Java</category>
        <category>minecraft</category>
        <category>minestom</category>
        <category>guide</category>
        <category>daily</category>
        <category>memories</category>
        <category>Linux</category>
        <category>misc</category>
        <category>summary</category>
        <item>
            <guid isPermalink="true">https://ib67.io/2022/12/19/Getting-Started-With-Minestom/</guid>
            <title>上手 Minestom: 新时代 Minecraft 服务端实现</title>
            <link>https://ib67.io/2022/12/19/Getting-Started-With-Minestom/</link>
            <category>minecraft</category>
            <category>minestom</category>
            <category>guide</category>
            <pubDate>Mon, 19 Dec 2022 21:20:35 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;笔者观望 &lt;a href=&#34;https://github.com/Minestom/Minestom&#34;&gt;Minestom&lt;/a&gt; 已经有一段时间了. 以前他的线程模型还不够成熟, 曾经联系 @TheMode 想帮他翻译那块的文档结果鸽了.&lt;br&gt;正好, 今天摸鱼的时候看了一眼 Minestom 官方, 发觉现在或许是时候上手尝试一下了.&lt;/p&gt;
&lt;p&gt;简中圈子里吹 Minestom 的很多, 然而真正上手 / 普及 Minestom 开发的很少. 官方文档已经足够详尽, 因此本篇博文只作引路贴, 希望对 Minestom 感兴趣的你自己上手尝试.&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h1 id=&#34;配置环境&#34;&gt;&lt;a href=&#34;#配置环境&#34; class=&#34;headerlink&#34; title=&#34;配置环境&#34;&gt;&lt;/a&gt;配置环境&lt;/h1&gt;&lt;p&gt;Minestom 主要托管在 &lt;a href=&#34;https://jitpack.io/&#34;&gt;JitPack&lt;/a&gt; 上.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;build.gradle:&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight groovy&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    maven &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        name &lt;span class=&#34;string&#34;&gt;&amp;#x27;JitPack&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        url &lt;span class=&#34;string&#34;&gt;&amp;#x27;https://jitpack.io&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    implementation &lt;span class=&#34;string&#34;&gt;&amp;#x27;com.github.Minestom:Minestom:VERSION&amp;#x27;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// 版本号自己去 JitPack 上面找&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;静静等待依赖图下载完成, 下载的过程中, 我们不难发现一些老熟人.&lt;/p&gt;
&lt;h1 id=&#34;启动&#34;&gt;&lt;a href=&#34;#启动&#34; class=&#34;headerlink&#34; title=&#34;启动&#34;&gt;&lt;/a&gt;启动&lt;/h1&gt;&lt;p&gt;Minestom 启动&lt;code&gt;实现&lt;/code&gt;很简单, 只需要两行就搞定了.&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;mc&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; MinecraftServer.init();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mc.start(&lt;span class=&#34;string&#34;&gt;&amp;quot;0.0.0.0&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;25565&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;一个空的 Minestom &lt;code&gt;实现&lt;/code&gt;在一秒钟内就能初始化完毕.&lt;br&gt;打开 Minecraft, 添加一个 &lt;code&gt;localhost&lt;/code&gt; 到服务器列表中就能看到你的新 Minestom 服务器.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.ibb.co/m0j5BN8/image.png?80&#34; alt=&#34;Minestom in ServerList&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意: Minestom 语境下的 &lt;code&gt;实例&lt;/code&gt; 和 &lt;code&gt;实现&lt;/code&gt; 可能和你想象中的不一样&lt;br&gt;例如: &lt;code&gt;实现/Implementation&lt;/code&gt; 是基于 Minestom 开发的服务端软件, 而 &lt;code&gt;实例/Instance&lt;/code&gt; 不只指对象.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你很快就会发现你卡在登入中. 先别急着去 Issues 找骂, 看看日志怎么说:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.ibb.co/q9xcpxY/image.png&#34; alt=&#34;Logs&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;You need to specify a spawning instance in the PlayerLoginEvent&lt;/code&gt; 嗯… 有意思.&lt;br&gt;如果想加入我们刚刚创建的新鲜 Minestom 实现, 我们首先要设置玩家加入的 &lt;code&gt;实例&lt;/code&gt;. 那么, 实例是什么?&lt;/p&gt;
&lt;h2 id=&#34;实例&#34;&gt;&lt;a href=&#34;#实例&#34; class=&#34;headerlink&#34; title=&#34;实例&#34;&gt;&lt;/a&gt;实例&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Instances are what replace “worlds” from Minecraft vanilla, those are lightweight and should offer similar properties. There are multiple instances implementation, currently InstanceContainer and SharedInstance (both are explained below)&lt;/p&gt;
&lt;p&gt;–&lt;a href=&#34;https://wiki.minestom.net/world/instances&#34;&gt;&lt;em&gt;The Minestom Wiki&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单的说, 在 Minestom 的世界里, &lt;code&gt;实例&lt;/code&gt; 和我们先前在 Bukkit / Forge 上开发时的 &lt;code&gt;世界&lt;/code&gt; 是相同的概念. 不同的是, 比起世界来说, 一个 &lt;code&gt;实例&lt;/code&gt; 通常更加轻量一些.&lt;/p&gt;
&lt;p&gt;那么怎么创建实例呢? 你可能会发现你刚刚得到的 &lt;code&gt;MinecraftServer&lt;/code&gt; 对象除了能监听端口什么都不会干, 这是因为 Minestom 的大部分功能…&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.ibb.co/kX4C16G/image.png&#34; alt=&#34;Method Complements&#34;&gt;&lt;/p&gt;
&lt;p&gt;都被 &lt;code&gt;MinecraftServer&lt;/code&gt; 的静态方法包装起来了. 我觉得这样做的意图可能是模拟其他 JVM 语言上 “&lt;code&gt;object&lt;/code&gt;“ 的做法, &lt;code&gt;object&lt;/code&gt; 类型的 “类” 默认就是单例, 因此这种类的静态方法不复存, 所有的方法和字段实际上都直接指向那个单例.&lt;br&gt;虽然在 Java 的语境下这样的做法难免令人&lt;del&gt;我&lt;/del&gt;感觉奇怪, 但是这毕竟不是重点.&lt;/p&gt;
&lt;p&gt;我们拿到 &lt;code&gt;InstanceManager&lt;/code&gt;, 然后创建一个新的实例:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;manager&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; MinecraftServer.getInstanceManager();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;instanceContainer&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; manager.createInstanceContainer();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;噢! 不要忘记设置默认的 &lt;code&gt;世界生成器&lt;/code&gt;, 不然你会一直掉下去虚空的.&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;instanceContainer.setGenerator(unit -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    unit.modifier().fillHeight(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, Block.GRASS_BLOCK));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后要注册一个事件监听器, 用于告诉 Minestom 我们想让玩家出生在什么地方.&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;MinecraftServer.getGlobalEventHandler().addListener(PlayerLoginEvent.class, evt -&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    evt.setSpawningInstance(instanceContainer);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;但是! 虽然现在已经可以进入服务器了, 我们会出生在 &lt;code&gt;(0,0,0)&lt;/code&gt;, 然后无尽掉虚空.&lt;br&gt;所以, 还需要额外补几行防止这种情况.&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;MinecraftServer.getGlobalEventHandler().addListener(PlayerSpawnEvent.class, evt -&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    evt.getPlayer().teleport(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Pos&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;启动服务器, 进去将会发现一大片草方块.&lt;/p&gt;
&lt;p&gt;或者, 你也可以稍微更换一些参数…&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.ibb.co/8cBNXBT/image.png&#34; alt=&#34;莫名其妙的压迫感&#34;&gt;&lt;/p&gt;
&lt;p&gt;Minestom 生成世界的速度很快(可能是懒加载而已), 你几乎感受不到平时在 Notchian 服上最常见的世界生成卡顿. (可能是因为空 Minestom 处理的数据比较少, Minestom 就算直接加载 Minecraft 地图速度也是远超 Notchian.)&lt;br&gt;虽然 Minestom 支持直接加载 Anvil 格式的存档, 但是官方文档没有提到要怎么做.&lt;/p&gt;
&lt;h3 id=&#34;加载-Anvil-格式的地图&#34;&gt;&lt;a href=&#34;#加载-Anvil-格式的地图&#34; class=&#34;headerlink&#34; title=&#34;加载 Anvil 格式的地图&#34;&gt;&lt;/a&gt;加载 Anvil 格式的地图&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;注: 以下使用的主要 API 被官方标记为不稳定&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不难发现, &lt;code&gt;createInstanceContainer&lt;/code&gt; 其实有支持传入 &lt;code&gt;IChunkLoader&lt;/code&gt; 的重载方法. 只需要搜索片刻…&lt;/p&gt;
&lt;p&gt;你就能找到 &lt;code&gt;AnvilLoader&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&#34;highlight patch&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;    var manager = MinecraftServer.getInstanceManager();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;deletion&#34;&gt;-   var instanceContainer = manager.createInstanceContainer();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;addition&#34;&gt;+   var instanceContainer = manager.createInstanceContainer(new AnvilLoader(&amp;quot;/path/to/A New World&amp;quot;));&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    instanceContainer.setGenerator(unit -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;只需要这样, 就可以加载你的 Minecraft 地图了.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.ibb.co/5BR9Mtv/image.png&#34; alt=&#34;半秒以内就齐刷刷闪出来了!!&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;聊天与命令&#34;&gt;&lt;a href=&#34;#聊天与命令&#34; class=&#34;headerlink&#34; title=&#34;聊天与命令&#34;&gt;&lt;/a&gt;聊天与命令&lt;/h1&gt;&lt;p&gt;Minestom 似乎内置一个简单的聊天功能实现 (连聊天格式都和原版一样), 处理信息的方法应该和在 Bukkit 上的相差不大, 只不过 Minestom &lt;strong&gt;大量&lt;/strong&gt;运用了 Kyori 的 &lt;a href=&#34;https://docs.adventure.kyori.net/&#34;&gt;Adventure API&lt;/a&gt;&lt;del&gt;我有点反胃&lt;/del&gt;. 写代码时最好留个心眼在返回值上.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.ibb.co/VBkX8Xk/image.png&#34; alt=&#34;`getUsername` 才是正解&#34;&gt;&lt;/p&gt;
&lt;p&gt;所以比较想提一嘴的是命令, 毕竟其他教程也有&lt;del&gt;自古以来&lt;/del&gt;从命令入手写功能的习俗.&lt;/p&gt;
&lt;p&gt;注册一个新的命令很简单:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;commandNew&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Command&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;new&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;commandNew.setDefaultExecutor((sender, context)-&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// your business logic...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MinecraftServer.getCommandManager().register(commandNew);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着你就可以在你的实现里用 &lt;code&gt;/new&lt;/code&gt; 了, 正如你想象的那样运行. 这个命令框架看起来并不新奇, 笔者甚至觉得有些奇怪.&lt;/p&gt;
&lt;p&gt;不过, 上面给的例子只是为了你三行快速上手, 官方推崇的写法是这样的:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; demo.commands;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; net.minestom.server.command.builder.Command;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestCommand&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Command&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;TestCommand&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;my-command&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;hey&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// &amp;quot;my-command&amp;quot; 是这个命令的主要名字.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// &amp;quot;hey&amp;quot; 是命令的别名, 使用 /hey 和 /my-command 是一样的.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;之后一样的套路: &lt;code&gt;MinecraftServer.getCommandManager().register(new TestCommand())&lt;/code&gt;&lt;br&gt;接着是, 有参数的情况:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; demo.commands;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; net.minestom.server.command.builder.Command;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; net.minestom.server.command.builder.arguments.ArgumentType;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestCommand&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Command&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;TestCommand&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;alias&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 如果没有匹配到其他 Executor 就回落到这上面.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        setDefaultExecutor((sender, context) -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            sender.sendMessage(&lt;span class=&#34;string&#34;&gt;&amp;quot;You executed the command&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 全部的默认参数类型都在 ArgumentType 类里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 这些静态工厂的参数是一些 `标识符`, 用于让程序分辨参数 (并且在 Minestom 内部用于创建节点)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;numberArgument&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; ArgumentType.Integer(&lt;span class=&#34;string&#34;&gt;&amp;quot;my-number&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 最后, 定义指令的 语法. (Syntax)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        addSyntax((sender, context) -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; context.get(numberArgument);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            sender.sendMessage(&lt;span class=&#34;string&#34;&gt;&amp;quot;You typed the number &amp;quot;&lt;/span&gt; + number);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;, numberArgument, ...more);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在埋头苦读上方源码之前, 不如看看官方文档是怎么解释的.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All auto-completable commands should extend Command, each command is composed of zero or multiple syntaxes, and each syntax is composed of arguments&lt;/p&gt;
&lt;p&gt;If you find it confusing, here are a few examples:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/health&lt;/code&gt; 一条指令&lt;br&gt;&lt;code&gt;/health set 50;&lt;/code&gt; 一条指令和他的语法&lt;br&gt;&lt;code&gt;set&lt;/code&gt; 一小段字面量型的参数&lt;br&gt;&lt;code&gt;~ ~ ~&lt;/code&gt; 一&lt;strong&gt;个&lt;/strong&gt;坐标参数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一条命令由零个或多个 &lt;code&gt;语法&lt;/code&gt; 构成, 每个 &lt;code&gt;语法&lt;/code&gt; 又由一个或多个参数构成. 如果感到无法理解, 不如这样想:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所谓的 &lt;code&gt;语法&lt;/code&gt; 就是命令的一个基本样子.&lt;br&gt;比如: &lt;code&gt;/effect xxx give xxx&lt;/code&gt; 是一条语法, 而 &lt;code&gt;/effect xxx give xxx 30 24&lt;/code&gt; 因为后面多了两个参数就是一个新的语法.&lt;/li&gt;
&lt;li&gt;所以语法就规定了应该有哪些参数, 以及它们对应的类型.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;img src=&#34;https://i.ibb.co/6bcw38v/image.png&#34; alt=&#34;上面命令补全回调触发的效果&#34;&gt;&lt;/p&gt;
&lt;p&gt;更多内容, 请转向 &lt;a href=&#34;https://wiki.minestom.net/feature/commands&#34;&gt;官方文档 / Minestom Wiki&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;一些别的&#34;&gt;&lt;a href=&#34;#一些别的&#34; class=&#34;headerlink&#34; title=&#34;一些别的&#34;&gt;&lt;/a&gt;一些别的&lt;/h1&gt;&lt;p&gt;虽然它还是高度实验性的服务端, 但是它很有潜力一举代替 Spigot 成为支撑 RPG, 小游戏服务器的主流服务端, &lt;del&gt;这也说明这真的不怪Java, 别再说什么 C++ 重写性能翻3000%了&lt;/del&gt; 因此, 现在开始学习如何使用是完全可取的, 因为本文所述的, 官方 Wiki 中包含的, 以及本身 API 架构不太可能再发生巨大变更.&lt;/p&gt;
&lt;p&gt;Minestom 不仅提供了一个更加模块化的 Minecraft 服务端事件, 而且也兼顾了性能和 API 的良好设计, 开放程度&lt;a href=&#34;https://wiki.minestom.net/feature/map-rendering/glfwmaprendering&#34;&gt;远超 Spigot&lt;/a&gt;. 但是在使用 Minestom 开发你的实现之前, 你要花更多精力在维持好程序的良好架构上, 不然就会 go die.&lt;br&gt;&lt;del&gt;有人今天用minestom写东西写的一团糟我不说是谁&lt;/del&gt; 所以, 我觉得如果不是很必要, 可以使用 Minestom 的 &lt;a href=&#34;https://wiki.minestom.net/expansion/extensions&#34;&gt;扩展(插件)&lt;/a&gt; API 和 &lt;a href=&#34;https://wiki.minestom.net/expansion/scripting&#34;&gt;高度实验性的脚本&lt;/a&gt; API.&lt;br&gt;这样做或许更加有利于 Minestom 的生态发展, 而最坏的情况就是大家都喜欢自己 hold 一个 Minestom, 谁也不服谁, 就好像那帮 Mod Loader 一样.&lt;br&gt;但是 Mod Loader 也各自多多少少有一些 Mod, 要是世界上光有 Mod Loader 没有 Mod 就真的成灾难了…&lt;/p&gt;
&lt;h1 id=&#34;End&#34;&gt;&lt;a href=&#34;#End&#34; class=&#34;headerlink&#34; title=&#34;End&#34;&gt;&lt;/a&gt;End&lt;/h1&gt;&lt;p&gt;感谢你的观看, 欢迎在评论区留言.&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
