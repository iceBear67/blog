<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>nstd::out</title>
        <link>https://nstd.sfclub.cc</link>
        <description>iceBear 的博客</description>
        <language>zh-CN</language>
        <pubDate>Fri, 05 Nov 2021 23:20:16 +0800</pubDate>
        <lastBuildDate>Fri, 05 Nov 2021 23:20:16 +0800</lastBuildDate>
        <category>tech,linux</category>
        <category>idea,fcitx,ibus</category>
        <category>tech</category>
        <category>life memories</category>
        <item>
            <guid isPermalink="true">https://nstd.sfclub.cc/2021/11/05/How-Does-Java-Tag-Garbages/</guid>
            <title>浅谈 Java 虚拟机是如何标识垃圾的</title>
            <link>https://nstd.sfclub.cc/2021/11/05/How-Does-Java-Tag-Garbages/</link>
            <category>tech</category>
            <pubDate>Fri, 05 Nov 2021 23:20:16 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Java 作为一门 VM 语言，它的垃圾回收机制确实帮我们省了很多事情，我们不再需要去”手动管理内存的分配和释放”，只需要交给 VM 来做就好了。  &lt;/p&gt;
&lt;p&gt;然而，真的是这样吗？即使有&lt;a href=&#34;https://malloc.se/blog/zgc-jdk16&#34;&gt;神一般高性能的垃圾回收器&lt;/a&gt;，我们写代码时仍然需要注意它是&lt;em&gt;如何标记垃圾对象&lt;/em&gt;的，因为垃圾回收器并不是万能的，仍然有一些工作需要程序员自己完成。  &lt;/p&gt;
&lt;p&gt;本文试图通俗易懂的讲解 JVM 上标记垃圾的方法，如有错误请在评论区指正。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h1 id=&#34;两种标记垃圾的方式&#34;&gt;&lt;a href=&#34;#两种标记垃圾的方式&#34; class=&#34;headerlink&#34; title=&#34;两种标记垃圾的方式&#34;&gt;&lt;/a&gt;两种标记垃圾的方式&lt;/h1&gt;&lt;p&gt;或许你曾听闻过 &lt;code&gt;引用计数法&lt;/code&gt;，也就是 &lt;code&gt;一个对象被引用时计数器 + 1 ，解除引用时计数器 - 1，当计数器为 0 时将会被 GC&lt;/code&gt;，看起来非常可行。  &lt;/p&gt;
&lt;p&gt;但是这种方法没有被 Java 采用，因为他有两个显而易见的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;循环引用问题 如果一个对象内部引用了另一个 引用这个对象的 对象，那么计数器将永远不会为 0&lt;/li&gt;
&lt;li&gt;计数器的维护问题 引用计数器的值会以极快的速度更新，更新任务变得繁重 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;或许因此，Java 采用了 &lt;code&gt;可达性分析&lt;/code&gt; 的方法对垃圾进行标记。&lt;/p&gt;
&lt;h1 id=&#34;可达性分析&#34;&gt;&lt;a href=&#34;#可达性分析&#34; class=&#34;headerlink&#34; title=&#34;可达性分析&#34;&gt;&lt;/a&gt;可达性分析&lt;/h1&gt;&lt;p&gt;可达性分析的思路很简单。&lt;/p&gt;
&lt;p&gt;他从一组叫 &lt;code&gt;GC Root&lt;/code&gt; 的引用出发，递归搜索出所有能被到达的节点作为&lt;strong&gt;存活&lt;/strong&gt;的对象，而此外那些没有被搜索到的对象就会被标记 &lt;strong&gt;将被清理&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.cc/i1/2021/11/05/cvqtiw.png&#34;&gt;  &lt;/p&gt;
&lt;p&gt;途中，被蓝色尖头指向的对象将不会被清除，因为他们间接或者直接的被 &lt;code&gt;GC Root&lt;/code&gt; 引用。而旁边没有被 &lt;code&gt;GC Root&lt;/code&gt; 引用的两个对象将会被清除，无论他们之间有什么关系。&lt;/p&gt;
&lt;p&gt;不久，因为 &lt;code&gt;Garbage F&lt;/code&gt; 和他的朋友 &lt;code&gt;Garbage E&lt;/code&gt; 没有来自 &lt;code&gt;GC Root&lt;/code&gt; 的直接/间接引用，他们就会被 gc 回收掉了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;想想看，如果在这个图中 &lt;code&gt;Object C&lt;/code&gt; 建立了到 &lt;code&gt;Garbage F&lt;/code&gt; 的一个引用，会发生什么？  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;引用&#34;&gt;&lt;a href=&#34;#引用&#34; class=&#34;headerlink&#34; title=&#34;引用&#34;&gt;&lt;/a&gt;引用&lt;/h2&gt;&lt;p&gt;在聊 &lt;code&gt;GC Root&lt;/code&gt; 是什么之前，你可能需要知道引用是什么。  &lt;/p&gt;
&lt;p&gt;举个例子&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Object a = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Object();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; c = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; a == c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;```  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;以上代码运行不会报错，因为他们是在内存中是同一个对象。这是如何做到的呢？ JVM 并没有把这个对象拷贝很多次，因为他赋值并不是赋一个对象，而是引用。  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;这是因为对象是分配在堆里的，`&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Object()` 返回的实际上是一个`引用`。引用就是指向对象的钥匙。  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;打个比方说， `网盘链接` 可以指向一个资源，你把链接给了别人并不是直接把资源发送给了别人，只是给了一个指向资源的钥匙，它可以通过这个钥匙获取到资源。  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;再来看一个例子&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;```java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;Object&amp;gt; someObject = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;someObject.add(objectA);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;someObject.add(objectB);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;```    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;显然，以上的代码将两个对象塞到了一个容器里，看起来是这样的：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;![](https:&lt;span class=&#34;comment&#34;&gt;//upload.cc/i1/2021/11/05/7QuXlj.png)   &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;当然，不只是塞到容器才有引用&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;```java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    A anotherA;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;A a = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; A():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;A b = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; A();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a.anotherA = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;```  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;![](https:&lt;span class=&#34;comment&#34;&gt;//upload.cc/i1/2021/11/06/0Dv9Rg.png)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;如果你无法理解引用也没有问题，只需要理解成一个对象存了另一个对象之间建立的关系就好了。  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;## GC Root&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;GC Root 是垃圾收集器进行分析的起点，不会被回收，而且类型有很多种~~但是基本上不用特地记~~，主要就注意这几个。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1.&lt;/span&gt; 局部变量，参数之类的 就是指方法里面声明的那些变量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2.&lt;/span&gt; 类静态字段或常量 比如 `&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; XX xx = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; XX()` &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;3.&lt;/span&gt; 虚拟机内部引用&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4.&lt;/span&gt; 被同步锁持有的对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 来个例子&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;```java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; List&amp;lt;OOMObject&amp;gt; oomObjects = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt;&lt;span class=&#34;number&#34;&gt;114514&lt;/span&gt; ; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    oomObjects.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; OOMObject());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;试图说明程序内存溢出的原因。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nstd.sfclub.cc/2021/10/12/Windy-Day/</guid>
            <title>大风天</title>
            <link>https://nstd.sfclub.cc/2021/10/12/Windy-Day/</link>
            <category>life memories</category>
            <pubDate>Tue, 12 Oct 2021 17:01:14 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;深夜了。&lt;/p&gt;
&lt;p&gt;窗外，大风呼啸着向我宣告冬天的到来。我躺在床上，静静地聆听风的呼声。  &lt;/p&gt;
&lt;p&gt;闭上了双眼，就仿佛置身于世界之外，只有风的护声。仿佛想到在几千年前……更久以前风也是这么呼的。  &lt;/p&gt;
&lt;p&gt;像是凄凉的呼唤，又像是愤怒的咆哮——不过只是人主观给他添加上的情绪。风大抵是没有感情的，只是咆哮，从地球之初到现世皆是如此，毫无忌惮的咆哮着。  &lt;/p&gt;
&lt;p&gt;风挂过窗外的小河引起阵阵波浪，也刮的树叶动燥不安，风试图撞进窗来，而我听着他们的声音安稳的睡了一觉。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;


&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;一觉醒来，世界又好像被大风改造成一番新景色。可能是拜前几天的台风所赐，夏日的炎炎酷热早就荡然无存。大风划过我睡的迷迷糊糊的脸颊，让我打了一哆嗦。  &lt;/p&gt;
&lt;p&gt;大风天！我不禁感叹。每当到了这样的大风天，我总是能亢奋起来。大风吹过我的身体，给我注入了新的活力。&lt;/p&gt;
&lt;p&gt;于是我敞开胸怀，让大风使劲地吹。与夏日那股闷燥的气息不同，冬天的大风清爽怡人（我所在的城市基本没有秋天这个概念），它不仅能卷走一切，也能让我打一喷嚏。  &lt;/p&gt;
&lt;p&gt;我喜欢大风天，但不只是为了凉爽。&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;曾经，也是同样的大风天里，我给我的猫洗了个澡。&lt;/p&gt;
&lt;p&gt;大风在窗外呼啸，然而它也冷的发抖。大抵是身上的水还没有沥干罢。我抱着它到被窝里，头对着头睡了一觉。  &lt;/p&gt;
&lt;p&gt;它没有逃跑，只是依偎着，暖暖的，大风仍在呼啸。&lt;/p&gt;
&lt;p&gt;又是曾经的一个大风天，那时候我还没有住宿，我走在回家的小路上。  &lt;/p&gt;
&lt;p&gt;大风吹过校园，刮的树们好不安分，太阳也慢慢地沉下去。&lt;/p&gt;
&lt;p&gt; 我悠闲自在的走在小路上，想着今晚吃什么，回家之后先做点什么。&lt;/p&gt;
&lt;p&gt; 有时，还能在路边发现流浪猫。我总是忘记带上水和猫粮——偶尔会带一些水，不过不知道猫愿不愿意喝，它也不出来，便放在它可能出现的地方许个愿就走了。&lt;/p&gt;
&lt;p&gt; 我希望它能找到住所。&lt;/p&gt;
&lt;p&gt;睡觉的时候，我躲在被窝里，想到任凭窗外大风呼啸也冻不着我，笑了起来。&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;也是曾经，在一个大风天里，我被委屈骂了一顿。  &lt;/p&gt;
&lt;p&gt;淋着大雨回到了家，不为洗澡只为哭。我锁上门，瘫坐在地上哭起来，巴不得把全世界控诉一遍才开心。&lt;/p&gt;
&lt;p&gt;还没哭一小会，猫就听闻到我的声音，从它熟睡的地方跳出来，试图安慰我，于是也叫了起来。&lt;/p&gt;
&lt;p&gt;我看着它傻傻的样子，不禁破涕而笑。窗外阴云密布，但我有小太阳。  &lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;再后来，又是新年，又是一番喜庆的景象。追着人家的小牛绕着圈，在院子里玩玩具枪，在乡下体验”探险”，那时候还没有抖音，快手。&lt;/p&gt;
&lt;p&gt;我坐在院子里，享受着晚风悄悄地吹过。&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;时光飞逝。&lt;/p&gt;
&lt;p&gt;再后来，我上了初中，又上了高中，还住了宿，再也没有看夕阳和闲情雅致的时间，陪伴猫的时间也越来越少。&lt;/p&gt;
&lt;p&gt;后来，家姐把它领了回去，再后来见他时已然过了两三年，但它仍然记得我，不禁让我万分感动。然而猫还是活不过人，只好在他现存的时候尽可能陪陪它，也算是让我不留缺憾了。  &lt;/p&gt;
&lt;p&gt;大风天卷走一切，也卷不走回忆和温暖。我吹着大风，听着大风，然而我却不觉得冷，就好像幸福的事情即将发生，就好像我还是曾经在床头旁哭的我。&lt;/p&gt;
&lt;p&gt;大风天。每当想起这些事情，我就仿佛有了屏障，有了一个小太阳，不仅仅是挡住了大风，也烧掉了我的痛苦，我的惆怅。&lt;/p&gt;
&lt;p&gt;2021.10.12 回忆。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nstd.sfclub.cc/2021/10/01/Writting-A-Compiler-1/</guid>
            <title>从零开始的编译器生涯</title>
            <link>https://nstd.sfclub.cc/2021/10/01/Writting-A-Compiler-1/</link>
            <category>tech</category>
            <pubDate>Fri, 01 Oct 2021 22:12:37 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;近日一屑高二学生无聊动手写起了编译器….这是他的珍贵作战记录    &lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h1 id=&#34;0x01-理论基础&#34;&gt;&lt;a href=&#34;#0x01-理论基础&#34; class=&#34;headerlink&#34; title=&#34;0x01 理论基础&#34;&gt;&lt;/a&gt;0x01 理论基础&lt;/h1&gt;&lt;p&gt;我摊牌，我没有看任何编译原理相关的书籍，因此这篇文章并不能作为严格的参考资料，甚至很多地方可能是错误的。  &lt;/p&gt;
&lt;p&gt;编译器，编译器，就是把高级语言的代码编译成另一种形式（class，asm，二进制，IR），而他在编译成另一种形式之前大概需要过这么个流程:&lt;/p&gt;
&lt;p&gt;Lex -&amp;gt; Parse -&amp;gt; Compile  &lt;/p&gt;
&lt;p&gt;接下来逐步讲解这个过程。&lt;/p&gt;
&lt;h2 id=&#34;Lexer&#34;&gt;&lt;a href=&#34;#Lexer&#34; class=&#34;headerlink&#34; title=&#34;Lexer&#34;&gt;&lt;/a&gt;Lexer&lt;/h2&gt;&lt;p&gt;就是分词器，输入用户提供的代码接着把他分成 &lt;code&gt;tokens&lt;/code&gt;，也就是 &lt;code&gt;tokenstream&lt;/code&gt;。&lt;br&gt;你肯定看不懂上面那句话的意思，让我们来点实例：&lt;br&gt;&lt;img src=&#34;https://upload.cc/i1/2021/10/01/gGftuh.png&#34; alt=&#34;image&#34;&gt;&lt;br&gt;&lt;code&gt;a.value&lt;/code&gt; 里的那个 &lt;code&gt;ArrayList&lt;/code&gt; 就是一个 &lt;code&gt;token stream&lt;/code&gt;，&lt;code&gt;str&lt;/code&gt; 是被解析的代码。不难发现，语句被 Lexer 按顺序进行了分类以及数据的分割，如 &lt;code&gt;a&lt;/code&gt; 被识别为了一个 &lt;code&gt;Identify&lt;/code&gt; (标记)。 &lt;/p&gt;
&lt;p&gt;因此也可以归纳出来 &lt;code&gt;Token&lt;/code&gt; 大致的代码长啥样：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@AllArgsConstructor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Getter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Token&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; line;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Type type;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String content;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Parser&#34;&gt;&lt;a href=&#34;#Parser&#34; class=&#34;headerlink&#34; title=&#34;Parser&#34;&gt;&lt;/a&gt;Parser&lt;/h2&gt;&lt;p&gt;Lexer 从源码中提取出 &lt;code&gt;token stream&lt;/code&gt; 后将会交给 &lt;code&gt;Parser&lt;/code&gt; 处理，它负责对 &lt;code&gt;token stream&lt;/code&gt; 进行解析，生成一个 &lt;code&gt;AST (Abstract Syntax Tree)&lt;/code&gt;，也就是 &lt;code&gt;抽象语法树&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.cc/i1/2021/10/01/nVE3wl.png&#34;&gt;&lt;br&gt;这张图直观的描述了这一过程，你可以看到它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。之所以说语法是“抽象”的，是因为这里的语法并不会表示出真实语法中出现的每个细节。  &lt;/p&gt;
&lt;p&gt;接着，AST 将会丢给代码生成器用于生成代码，但是一般会先对 AST 进行优化，例如 &lt;code&gt;常量折叠&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;Static-Analyzing&#34;&gt;&lt;a href=&#34;#Static-Analyzing&#34; class=&#34;headerlink&#34; title=&#34;Static Analyzing&#34;&gt;&lt;/a&gt;Static Analyzing&lt;/h2&gt;&lt;p&gt;但在这之前，我们还有一些问题要解决。&lt;br&gt;&lt;del&gt;其实这玩意我是和 Parser 写一块的&lt;/del&gt;&lt;br&gt;试想一下，如果有这样一行代码：  &lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i = love + cats&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码生成器如何知道 &lt;code&gt;love&lt;/code&gt; 和 &lt;code&gt;cats&lt;/code&gt; 是什么？ 在 Parser 的眼里，他们只是 &lt;code&gt;Identifier&lt;/code&gt;，然而它们之间不能相加减。  &lt;/p&gt;
&lt;p&gt;在这种时候，Parser 需要预先建立一个符号表，这样他才能找出 &lt;code&gt;love&lt;/code&gt; 和 &lt;code&gt;cats&lt;/code&gt; 究竟是什么以及是否能够编译。&lt;/p&gt;
&lt;p&gt;同理，下面的代码也一样需要这一过程：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.util.List&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(List&amp;lt;String&amp;gt; args)&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;span class=&#34;comment&#34;&gt;// 此处 Parser 将会分析出 java.lang.String 和 java.util.List&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  NullCat nc = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SBNC(); &lt;span class=&#34;comment&#34;&gt;// 按照 Java 的逻辑，此处没有导入（或同包）于是会产生错误，因为Parser找不到 SBNC / NullCat&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Code-Generation&#34;&gt;&lt;a href=&#34;#Code-Generation&#34; class=&#34;headerlink&#34; title=&#34;Code Generation&#34;&gt;&lt;/a&gt;Code Generation&lt;/h2&gt;&lt;p&gt;接着是生成代码！&lt;br&gt;一般编译器都会输出一种 &lt;code&gt;IR (Intermediate Representation)&lt;/code&gt; 码，而他的作用则是一种中间表示。&lt;br&gt;例如，如果你输出 LLVM 的 IR 码，那么接下来你的编译工作（win,x64,linux,…jvm）就可以交给 LLVM 来完成，而像 &lt;code&gt;LLVM&lt;/code&gt; 这样负责最后这一步骤的我们称之为 &lt;code&gt;编译器的后端&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用这一种方法有几个好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它可以使得开发者更专注于 &lt;code&gt;语言设计&lt;/code&gt; 而不用过多的考虑 &lt;code&gt;优化&lt;/code&gt;，因为大多数编译器后端会帮你完成这件事情 &lt;del&gt;，除非你直接输出汇编那就得你自己负责优化了&lt;/del&gt;。&lt;/li&gt;
&lt;li&gt;IR 是中间表示，它可以按照相同的语义编译出不同平台，不同架构的代码，大大节省了开发者时间&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 处于个人习惯，我选择了 Java 的字节码作为 “IR”，他将会被 JVM 加载并在运行过程中收集数据被更好的优化以及可以享受和 Java 互操作，跨平台的优势。&lt;/p&gt;
&lt;h1 id=&#34;0x02-实践&#34;&gt;&lt;a href=&#34;#0x02-实践&#34; class=&#34;headerlink&#34; title=&#34;0x02 实践&#34;&gt;&lt;/a&gt;0x02 实践&lt;/h1&gt;&lt;p&gt;知道了这些理论，我们立即可以开始编写我们的第一个 Lexer 了。&lt;/p&gt;
&lt;p&gt;这是我们这一大章节的目标代码：&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;using java.util.List&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fn main(args: List&amp;lt;String&amp;gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  println &amp;quot;hello world!&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;那么，让我们开始吧！&lt;br&gt;下文将会有大量代码，为了可读性，我会删掉一些无关紧要的部分。&lt;/p&gt;
&lt;h2 id=&#34;Lexer-1&#34;&gt;&lt;a href=&#34;#Lexer-1&#34; class=&#34;headerlink&#34; title=&#34;Lexer&#34;&gt;&lt;/a&gt;Lexer&lt;/h2&gt;&lt;p&gt;我的 Lexer 分为两步：&lt;code&gt;fuzzyTokenize&lt;/code&gt; 和 &lt;code&gt;tokenize&lt;/code&gt;。&lt;br&gt;实际上这是取决于做法的，有正则转 DFA（状态机）的，也有直接 &lt;code&gt;charStream&lt;/code&gt; 的。&lt;/p&gt;
&lt;p&gt;我选择了第二种，因为我认为使用正则的代码可读性比较糟糕，不易于维护。那么，让我们开始做一些准备工作…&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Lexer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String fileName;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String rawContent;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Lexer&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String content,String fileName)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rawContent = content.replaceAll(&lt;span class=&#34;string&#34;&gt;&amp;quot;//.*|(\&amp;quot;(?:\\\\[^\&amp;quot;]|\\\\\&amp;quot;|.)*?\&amp;quot;)|(?s)/\\*.*?\\*/&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;$1 &amp;quot;&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// remove comments.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.fileName=fileName;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;从构造方法接受源代码和文件名并且删除注释。你可能会问文件名用来干啥，那当然是用来报错的～&lt;br&gt;接着，还有一个 &lt;code&gt;LexedNode&lt;/code&gt; 用来表示 &lt;code&gt;fuzzyTokenize&lt;/code&gt; 后的产物。  &lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;LexedNode&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; NodeType type;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String content;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 初始化和getter...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;NodeType&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        IDENTIFIER,SYMBOL,KEYWORD,OPERATOR,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        LINE_SEPERATOR,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        LITERAL_STRING,LITERAL_NUMBER&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这就是一个最基本的 &lt;code&gt;token&lt;/code&gt;! 在后文，我们将会进行第二次 &lt;code&gt;tokenize&lt;/code&gt; 使它变得更详细。  &lt;/p&gt;
&lt;p&gt;准备好了，开始写吧！首先是一个状态机：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; List&amp;lt;LexedNode&amp;gt; &lt;span class=&#34;title&#34;&gt;fuzzyTokenize&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt;[] charStream = rawContent.toCharArray();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    List&amp;lt;LexedNode&amp;gt; nodes = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; line = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; charStream.length; i++) &amp;#123; &lt;span class=&#34;comment&#34;&gt;// 使用 fori 是为了循环时移动指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; now = charStream[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (now) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;\n&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;              nodes.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; LexedNode(NodeType.LINE_SEPERATOR,&lt;span class=&#34;string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;              &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 此处使用 continue 立即跳到下一次循环&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; nodes;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这就是你的第一个 Lexer，可以先输出一下看看结果：&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;LINE_SEPERATOR&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LINE_SEPERATOR&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LINE_SEPERATOR&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LINE_SEPERATOR&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LINE_SEPERATOR&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;因为代码有五行，因此是五个 &lt;code&gt;LINE_SEPERATOR&lt;/code&gt;。&lt;br&gt;只有换行符可不够，我们还要识别 &lt;code&gt;KEYWORD&lt;/code&gt; ，也就是关键词。&lt;br&gt;然而关键词使用空格分割，因此我们可以这样做：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt;(...)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;:                &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        inIdOrLiteral = !inIdOrLiteral;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (inIdOrLiteral) &amp;#123; &lt;span class=&#34;comment&#34;&gt;// start collecting&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// end!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String str = buffer.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        identifierParse(str, nodes);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        buffer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; StringBuilder(); &lt;span class=&#34;comment&#34;&gt;// compose&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 此处换行同理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* Collect String or Identifier */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (inIdOrLiteral) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        buffer.append(now);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;你可以看到，我们引入了两个新的变量和一个方法，它们分别是 &lt;code&gt;inIdOrLiteral&lt;/code&gt; 和 &lt;code&gt;buffer&lt;/code&gt; 以及 &lt;code&gt;identifierParse&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;inIdOrLiteral&lt;/strong&gt; 表示当前是否正在遍历一个 &lt;code&gt;Identifier&lt;/code&gt; 或者一个字面量&lt;br&gt;&lt;strong&gt;buffer&lt;/strong&gt; 用于收集这个字面量，当然你也可以使用 &lt;code&gt;substring&lt;/code&gt; 和 &lt;code&gt;charAt&lt;/code&gt; 的方法&lt;br&gt;&lt;strong&gt;identifierParse&lt;/strong&gt; 是一个方法，他用于分类 Identifier。对于 &lt;code&gt;11&lt;/code&gt;，他会分类成一个 &lt;code&gt;LITERAL_NUMBER&lt;/code&gt;，对于 &lt;code&gt;not_a_keyword&lt;/code&gt;，他会分类成一个 identifier，对于 &lt;code&gt;fn&lt;/code&gt;，他会分类成一个 Keyword。&lt;/p&gt;
&lt;p&gt;还没完，天资聪颖的你肯定已经注意到了这里少了一样东西——我要怎么匹配最开头的一个 &lt;code&gt;using&lt;/code&gt; ？ &lt;code&gt;using&lt;/code&gt; 的前头可没有一个空格。&lt;br&gt;这时你可以回忆一下，在各种编程语言中作为 &lt;code&gt;Identifier&lt;/code&gt; 的符号应该符合什么规则….是的，他们通常不会以运算符作为开头，以及他们不是一个关键字，因此我们还可以利用这个特性写出这样的代码:  &lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;         &lt;span class=&#34;comment&#34;&gt;/* Other Symbols */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (SYMBOL_OR_OPERATORS.contains(now）) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (inIdOrLiteral) &amp;#123; &lt;span class=&#34;comment&#34;&gt;// keyword&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 &lt;span class=&#34;comment&#34;&gt;// now == a symbol,we should end this.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 identifierParse(buffer.toString(), nodes);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 buffer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 inIdOrLiteral = &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (SYMBOLS.contains(now)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 nodes.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; LexedNode(now, LexedNode.NodeType.SYMBOL));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (OPERATORS.contains(now)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 nodes.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; LexedNode(now, LexedNode.NodeType.OPERATOR));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; LexerException(fileName+&lt;span class=&#34;string&#34;&gt;&amp;quot;: Unknown char: &amp;quot;&lt;/span&gt; + now+&lt;span class=&#34;string&#34;&gt;&amp;quot; line: &amp;quot;&lt;/span&gt;+line);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             inIdOrLiteral = &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// not symbol &amp;amp; not identifier&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* Collect String or Identifier */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (inIdOrLiteral) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     buffer.append(now);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这一段代码将会在匹配第一个字符没有遇到语言规定的操作符或者特殊符号的时候把 &lt;code&gt;inIdOrLiteral&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt;。配合上面的代码，在遇到一个空格的时候他会结束收集并且尝试判断是什么。&lt;/p&gt;
&lt;p&gt;实际上应该是 &lt;code&gt;switch&lt;/code&gt; 的任务但是写成 &lt;code&gt;if&lt;/code&gt; 更加直观一些。  &lt;/p&gt;
&lt;p&gt;那么到现在，我们可以开始尝试代码了！这是 Lexer 的输出：&lt;/p&gt;
&lt;figure class=&#34;highlight patch&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;KEYWORD using&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;IDENTIFIER java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;OPERATOR .&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;IDENTIFIER util&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;OPERATOR .&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;IDENTIFIER List&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LINE_SEPERATOR &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LINE_SEPERATOR &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;KEYWORD fn&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;IDENTIFIER main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SYMBOL (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;IDENTIFIER args&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;OPERATOR :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;IDENTIFIER List&amp;lt;String&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SYMBOL )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SYMBOL &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LINE_SEPERATOR &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;KEYWORD println&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;deletion&#34;&gt;- LITERAL_STRING hello world!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;addition&#34;&gt;+ IDENTIFIER &amp;quot;hello&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;addition&#34;&gt;+ IDENTIFIER world!&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LINE_SEPERATOR &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SYMBOL &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5: RIGHT_BRACKET &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;相比你已经注意到了，理应出现的 &lt;code&gt;LITERAL_STRING&lt;/code&gt; 被两个 IDENTIFIER 代替了，这显然不是我们想要的结果。因此，我们要给 String 加入特 殊 支 持  &lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt;(now)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;quot;&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (i != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; charStream[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] != &lt;span class=&#34;string&#34;&gt;&amp;#x27;\\&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;comment&#34;&gt;// string starts or end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        inIdOrLiteral = !inIdOrLiteral;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        stringMode = &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!inIdOrLiteral) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            stringMode = &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &lt;span class=&#34;comment&#34;&gt;// a new string!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            nodes.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; LexedNode(buffer.toString(), LexedNode.NodeType.LITERAL_STRING));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            buffer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;comment&#34;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;以及&lt;/p&gt;
&lt;figure class=&#34;highlight patch&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;    case &amp;#x27; &amp;#x27;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;addition&#34;&gt;+        if (stringMode) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;addition&#34;&gt;+            break;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;addition&#34;&gt;+        &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight patch&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;deletion&#34;&gt;- if (SYMBOL_OR_OPERATORS.contains(now)) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;addition&#34;&gt;+ if (SYMBOL_OR_OPERATORS.contains(now) &amp;amp;&amp;amp; !stringMode) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这样我们就躲开了这个陷阱，完成了对于 String 的支持后，我们的 &lt;code&gt;fuzzyTokenize&lt;/code&gt; 就做好了！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于 OPERATORS 和 SYMBOLS&lt;br&gt;一门语言里的符号很多，你绝对不会想把他们一个个 add 到 list 里面的，但你可以写一个 &lt;a href=&#34;https://github.com/iceBear67/NullCatLang/blob/85a9b3234bcaab21451c0c6023f46d3599e5764d/src/main/java/io/ib67/lexer/Lexer.java#L11-L34&#34;&gt;loader&lt;/a&gt; 来解决这个问题  &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.cc/i1/2021/10/01/HwBhRN.png&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;然后，是 &lt;code&gt;tokenizer&lt;/code&gt;。&lt;code&gt;fuzzyTokenize&lt;/code&gt; 输出的结果显然不足以交给 Parser 做解析，我们需要使i结果更加详细。&lt;/p&gt;
&lt;p&gt;好在经过 &lt;code&gt;fuzzyTokenize&lt;/code&gt; 后代码已经被格式化成了比较模糊的 &lt;code&gt;Token Stream&lt;/code&gt;，这一点使我们写第二次 tokenize 的时候会轻松很多，因为你不会再见到 &lt;code&gt;inIdOrLiteral&lt;/code&gt; 和 &lt;code&gt;stringMode&lt;/code&gt; 这种让人抓狂的东西了。&lt;/p&gt;
&lt;p&gt;首先，让我们从一个新的 Token 开始（你不会想和 LexedNode 混一块的）:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@AllArgsConstructor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Getter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Token&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; line;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Type type;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String content;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Type&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        IDENTIFIER(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CLASS(&lt;span class=&#34;string&#34;&gt;&amp;quot;class&amp;quot;&lt;/span&gt;),FUNCTION(&lt;span class=&#34;string&#34;&gt;&amp;quot;fn&amp;quot;&lt;/span&gt;),ANNOTATION(&lt;span class=&#34;string&#34;&gt;&amp;quot;annotation&amp;quot;&lt;/span&gt;),FOR(&lt;span class=&#34;string&#34;&gt;&amp;quot;for&amp;quot;&lt;/span&gt;),WHILE(&lt;span class=&#34;string&#34;&gt;&amp;quot;while&amp;quot;&lt;/span&gt;),IF(&lt;span class=&#34;string&#34;&gt;&amp;quot;if&amp;quot;&lt;/span&gt;),USING(&lt;span class=&#34;string&#34;&gt;&amp;quot;using&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ,THIS(&lt;span class=&#34;string&#34;&gt;&amp;quot;this&amp;quot;&lt;/span&gt;),TRUE(&lt;span class=&#34;string&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;),FALSE(&lt;span class=&#34;string&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;),ELSE(&lt;span class=&#34;string&#34;&gt;&amp;quot;else&amp;quot;&lt;/span&gt;),VAR(&lt;span class=&#34;string&#34;&gt;&amp;quot;var&amp;quot;&lt;/span&gt;),NULL(&lt;span class=&#34;string&#34;&gt;&amp;quot;null&amp;quot;&lt;/span&gt;),PRINTLN(&lt;span class=&#34;string&#34;&gt;&amp;quot;println&amp;quot;&lt;/span&gt;), &lt;span class=&#34;comment&#34;&gt;// KEYWORDS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        VAL(&lt;span class=&#34;string&#34;&gt;&amp;quot;val&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        LEFT_BRACE(&lt;span class=&#34;string&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;),RIGHT_BRACE(&lt;span class=&#34;string&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        LEFT_BRACKET(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;&amp;quot;&lt;/span&gt;),RIGHT_BRACKET(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#125;&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        LEFT_MID_BRACE(&lt;span class=&#34;string&#34;&gt;&amp;quot;[&amp;quot;&lt;/span&gt;),RIGHT_MID_BRACE(&lt;span class=&#34;string&#34;&gt;&amp;quot;]&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        COMMA(&lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;),DOT(&lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;),MINUS(&lt;span class=&#34;string&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;),PLUS(&lt;span class=&#34;string&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt;),STAR(&lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;),SLASH(&lt;span class=&#34;string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;), &lt;span class=&#34;comment&#34;&gt;// operators&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        BREAK_LINE(&lt;span class=&#34;string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;),ASSIGNMENT(&lt;span class=&#34;string&#34;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;),EQUALS(&lt;span class=&#34;string&#34;&gt;&amp;quot;==&amp;quot;&lt;/span&gt;),SEMICOLON(&lt;span class=&#34;string&#34;&gt;&amp;quot;;&amp;quot;&lt;/span&gt;),AT(&lt;span class=&#34;string&#34;&gt;&amp;quot;@&amp;quot;&lt;/span&gt;),COLON(&lt;span class=&#34;string&#34;&gt;&amp;quot;:&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        LITERAL_STRING(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;),LITERAL_NUMBER(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// literals&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;meta&#34;&gt;@Getter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String def;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Type(String def)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.def=def;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;比上文的 LexedNode 详细了很多——比如他主动去分类 keyword 了。&lt;br&gt;接着是一个 fori ：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Pair&amp;lt;String,List&amp;lt;Token&amp;gt;&amp;gt; tokenize() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; lexedNodes = fuzzyTokenize();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; tokens = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;Token&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; line = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; lexedNodes.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        LexedNode lexedNode = lexedNodes.get(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (lexedNode.getType()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; LINE_SEPERATOR:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                tokens.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Token(line, Token.Type.BREAK_LINE,&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                line++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; SYMBOL:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; KEYWORD:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; type = Arrays.stream(Token.Type.values()).filter(e -&amp;gt; e.getDef().equals(lexedNode.getContent())).findFirst().orElseThrow(()-&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; NullPointerException(lexedNode.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                tokens.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Token(line, type, type.getDef()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; LITERAL_STRING:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                tokens.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Token(line, Token.Type.LITERAL_STRING, lexedNode.getContent()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; LITERAL_NUMBER:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                tokens.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Token(line, Token.Type.LITERAL_NUMBER, lexedNode.getContent()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; OPERATOR:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// =&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; isEnd = (i == lexedNodes.size() - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (lexedNode.getContent()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (isEnd) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; LexerException(fileName+&lt;span class=&#34;string&#34;&gt;&amp;quot;: Invalid syntax line &amp;quot;&lt;/span&gt;+line);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (lexedNodes.get(i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;).getType() == LexedNode.NodeType.OPERATOR &amp;amp;&amp;amp; lexedNodes.get(i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;).getContent().equals(&lt;span class=&#34;string&#34;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;)) &amp;#123; &lt;span class=&#34;comment&#34;&gt;// ==&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            tokens.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Token(line, Token.Type.EQUALS, &lt;span class=&#34;string&#34;&gt;&amp;quot;==&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            i = i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// skip next&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            tokens.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Token(line, Token.Type.ASSIGNMENT, &lt;span class=&#34;string&#34;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        tokens.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Token(line, Token.Type.DOT, &lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        tokens.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Token(line, Token.Type.COMMA, &lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        tokens.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Token(line, Token.Type.MINUS, &lt;span class=&#34;string&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        tokens.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Token(line, Token.Type.PLUS, &lt;span class=&#34;string&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        tokens.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Token(line, Token.Type.STAR,&lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        tokens.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Token(line, Token.Type.SLASH,&lt;span class=&#34;string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;;&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        tokens.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Token(line, Token.Type.SEMICOLON,&lt;span class=&#34;string&#34;&gt;&amp;quot;;&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;:&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        tokens.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Token(line,Token.Type.COLON,&lt;span class=&#34;string&#34;&gt;&amp;quot;:&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; IDENTIFIER:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                tokens.add(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Token(line, Token.Type.IDENTIFIER, lexedNode.getContent()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; Pair.of(fileName,tokens);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这段代码并不难懂。在这个例子中，我们遍历来自 fuzzyTokenizer 的数据并且通过 switch 分类枚举来处理把他们转化成 &lt;code&gt;Token&lt;/code&gt; 来表达并且存储到 &lt;code&gt;tokens&lt;/code&gt;。对于 symbol 和 keyword，我们通过直接搜索 enum 内值的方法避免写出了像 &lt;code&gt;case OPERATOR&lt;/code&gt; 里更糟糕的代码。  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;case OPERATOR&lt;/code&gt; 里写成这样是为了双符号操作的支持，例如 &lt;code&gt;==&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;回到原题，这次我们可以通过 tokenize 解析出这样的结果：&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1: USING using&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1: IDENTIFIER java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1: DOT .&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1: IDENTIFIER util&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1: DOT .&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1: IDENTIFIER List&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1: BREAK_LINE &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2: BREAK_LINE &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3: FUNCTION fn&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3: IDENTIFIER main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3: LEFT_BRACE (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3: IDENTIFIER args&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3: COLON :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3: IDENTIFIER List&amp;lt;String&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3: RIGHT_BRACE )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3: LEFT_BRACKET &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3: BREAK_LINE &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4: PRINTLN println&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4: LITERAL_STRING hello world!&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4: BREAK_LINE &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5: RIGHT_BRACKET &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5: RIGHT_BRACKET &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;是不是详细了很多？接着我们就可以靠着这个写一个 Parser了&lt;/p&gt;
&lt;h2 id=&#34;在-Parse-之前&#34;&gt;&lt;a href=&#34;#在-Parse-之前&#34; class=&#34;headerlink&#34; title=&#34;在 Parse 之前&#34;&gt;&lt;/a&gt;在 Parse 之前&lt;/h2&gt;&lt;p&gt;在 Parse 之前，我们需要先做一次 Static Analyzing。在这个阶段，Parser 会对文件里的类型和导入表作出关联，同时也是多文件编译的基础。&lt;/p&gt;
&lt;h3 id=&#34;Metadata&#34;&gt;&lt;a href=&#34;#Metadata&#34; class=&#34;headerlink&#34; title=&#34;Metadata&#34;&gt;&lt;/a&gt;Metadata&lt;/h3&gt;&lt;p&gt;你不可能靠着所有人的源码来建立索引，而且源码中的无用信息太多了。&lt;br&gt;实际上，确定符号链接只需要这些信息：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CatMetadata&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; ClassDef classDefinition = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ClassDef();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Map&amp;lt;String,CatMetadata&amp;gt; cachedUsings = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;(); &lt;span class=&#34;comment&#34;&gt;// 这是对于被解析对象才有的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; List&amp;lt; MethodSign&amp;gt; methods = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Map&amp;lt;String, VariableDef&amp;gt; fields = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;关于 &lt;code&gt;ClassDef&lt;/code&gt;, &lt;code&gt;MethodSign&lt;/code&gt;, &lt;code&gt;VariableDef&lt;/code&gt; 等信息本文不贴出，因为并不会影响观看体验。&lt;br&gt;如果有兴趣，可以在&lt;a href=&#34;https://github.com/iceBear67/NullCatLang/tree/master/src/main/java/io/ib67/ast/decl&#34;&gt;这里&lt;/a&gt;找到他们相对应的具体代码  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以及一个编译器全局索引，用 FQDN 确定唯一性的 Map:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Global&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Map&amp;lt;String,CatMetadata&amp;gt; GLOBAL_METADATAS = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; CatMetadata &lt;span class=&#34;title&#34;&gt;forClass&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String str)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &lt;span class=&#34;comment&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;          * Scan compiler classPaths&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;          */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; meta = NullCatCompiler.solveMeta(str);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(meta!=&lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             GLOBAL_METADATAS.put(str, meta);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             meta = NullCatCompiler.solveMeta(&lt;span class=&#34;string&#34;&gt;&amp;quot;java.lang.&amp;quot;&lt;/span&gt; + str);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; meta;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;准备就绪，我们来单独拿出一个类作为 &lt;code&gt;MetadataGenerator&lt;/code&gt; 状态机  &lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RequiredArgsConstructor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MetadataGenerator&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String fileName;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; List&amp;lt;Token&amp;gt; tokens;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; CatMetadata cm = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CatMetadata();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;接着，是提取数据的部分:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CatMetadata &lt;span class=&#34;title&#34;&gt;gen&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; tokens.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Token now = tokens.get(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; end = (i==tokens.size()-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Token next = end?&lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;:tokens.get(i+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt;(now.getType())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; USING:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!end)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    i=i+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; clazz = readAsStringUntilLB();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    cm.getCachedUsings().put(clazz, Optional.ofNullable(CatMetadata.Global.forClass(clazz)).orElseThrow(()-&amp;gt;&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ParseException(&lt;span class=&#34;string&#34;&gt;&amp;quot;Can&amp;#x27;t find clazz &amp;quot;&lt;/span&gt;+clazz)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    throwEOF();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; FUNCTION:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (end) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    throwEOF();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// fn main()&amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(next.getType() != Token.Type.IDENTIFIER)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ParseException(fileName+&lt;span class=&#34;string&#34;&gt;&amp;quot;: Unexcepted &amp;quot;&lt;/span&gt;+next.getType()+&lt;span class=&#34;string&#34;&gt;&amp;quot; at line &amp;quot;&lt;/span&gt;+now.getLine());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                String methodName = next.getContent();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                i=i+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// Move Pointer to (&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                MethodSign sign = readMethodSign(methodName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(cm.getMethods().stream().anyMatch(e-&amp;gt;e.hashCode()==sign.hashCode()))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ParseException(fileName+&lt;span class=&#34;string&#34;&gt;&amp;quot;: Duplicated method: &amp;quot;&lt;/span&gt;+sign+&lt;span class=&#34;string&#34;&gt;&amp;quot; at line &amp;quot;&lt;/span&gt;+now.getLine());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                cm.getMethods().add(sign);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                skipCodeBlocks();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; cm;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个循环当中，我们通过获取到 Token 的类型来判定需要做的操作，这是基于语言设计定义来做的—— 例如 &lt;code&gt;fn&lt;/code&gt; 的后面必然是一个方法签名，而不可以是别的。最终 &lt;code&gt;MetadataGenerator&lt;/code&gt; 将会返回一个 CatMetadata 以供后续操作。&lt;/p&gt;
&lt;p&gt;因此，这一阶段我们也可以发掘出类型错误和大的语法错误。&lt;/p&gt;
&lt;h3 id=&#34;与-Java-的世界&#34;&gt;&lt;a href=&#34;#与-Java-的世界&#34; class=&#34;headerlink&#34; title=&#34;与 Java 的世界&#34;&gt;&lt;/a&gt;与 Java 的世界&lt;/h3&gt;&lt;p&gt;我们需要和 Java 交互，因此我们需要给 &lt;code&gt;Class&lt;/code&gt; 建立 &lt;code&gt;CatMetadata&lt;/code&gt; 。好在这很简单，因为 CatMetadata 需要的所有数据都可以通过反射获取，这里提供一段参考代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@AllArgsConstructor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ClassMetaPathImpl&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MetaPath&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; ClassLoader classLoader;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CatMetadata &lt;span class=&#34;title&#34;&gt;findClass&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String clazz)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CatMetadata cm = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CatMetadata();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Class&amp;lt;?&amp;gt; claz = Util.runCatching(()-&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; Class.forName(clazz,&lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;,classLoader);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;).getResult();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(claz==&lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (Field declaredField : claz.getDeclaredFields()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!Modifier.isPublic(declaredField.getModifiers())) &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            VariableDef def = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; VariableDef(declaredField.getType().getCanonicalName(),declaredField.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cm.getFields().put(declaredField.getName(),def);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(Method declaredMethod: claz.getDeclaredMethods())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!Modifier.isPublic(declaredMethod.getModifiers()))&lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            MethodSign sign = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MethodSign(declaredMethod.getName(), (ArrayList&amp;lt;String&amp;gt;) Arrays.stream(declaredMethod.getParameterTypes()).map(e-&amp;gt;e.getCanonicalName()).collect(Collectors.toList()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cm.getMethods().add(sign);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ClassDef cdf = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ClassDef();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cdf.setClassName(clazz);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cdf.setSuperclass(claz.getSuperclass()==&lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;?&lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;:claz.getSuperclass().getCanonicalName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cdf.setInterfaces(Arrays.stream(claz.getInterfaces()).map(e-&amp;gt;e.getCanonicalName()).collect(Collectors.toList()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cm.setClassDefinition(cdf);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; cm;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;静态分析结束后，我们就要准备开始生成 AST 了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;附&lt;br&gt;我们从 token 流中获取数据，并且根据类型进行匹配——但我们其实没有用到状态&lt;br&gt;仔细看，你会发现这个东西：&lt;/p&gt;
&lt;figure class=&#34;highlight patch&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;        i=i+1; // Move Pointer to (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;addition&#34;&gt;+        MethodSign sign = readMethodSign(methodName);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(cm.getMethods().stream().anyMatch(e-&amp;gt;e.hashCode()==sign.hashCode()))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            throw new ParseException(fileName+&amp;quot;: Duplicated method: &amp;quot;+sign+&amp;quot; at line &amp;quot;+now.getLine());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cm.getMethods().add(sign);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;addition&#34;&gt;+        skipCodeBlocks();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;是不是有些象是 DSL？&lt;br&gt;这其实归咎于类字段中那个不起眼的 &lt;code&gt;int i = 0&lt;/code&gt;，它使得 for 循环的指针可以被整个类里的方法所共享。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;readAsStringUntilLB&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;span class=&#34;comment&#34;&gt;// 一只读，读到一个换行为止并且收集成字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    StringBuilder sb = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; b=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; a = i; tokens.get(a).getType()!= Token.Type.BREAK_LINE;a++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sb.append(tokens.get(a).getContent());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        b=a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    i = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; sb.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在经过更加详细的 tokenize 之后，代码实际上变得更加可观了，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;Parser-1&#34;&gt;&lt;a href=&#34;#Parser-1&#34; class=&#34;headerlink&#34; title=&#34;Parser&#34;&gt;&lt;/a&gt;Parser&lt;/h2&gt;&lt;p&gt;先占个坑位～&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nstd.sfclub.cc/2021/07/18/Idea/</guid>
            <title>修复 Intellij IDEA 无法使用中文输入法</title>
            <link>https://nstd.sfclub.cc/2021/07/18/Idea/</link>
            <category>idea,fcitx,ibus</category>
            <pubDate>Sun, 18 Jul 2021 13:51:17 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;踩坑记录  &lt;/p&gt;
&lt;h1 id=&#34;TL-DR&#34;&gt;&lt;a href=&#34;#TL-DR&#34; class=&#34;headerlink&#34; title=&#34;TL;DR&#34;&gt;&lt;/a&gt;TL;DR&lt;/h1&gt;&lt;p&gt;系统: ArchLinux&lt;br&gt;一切的大前提: 环境变量设置正确(GTK_IM_MODULE…)  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ibus 用户可以试试迁移到 fcitx&lt;/li&gt;
&lt;li&gt;fcitx 如果不行可能得自己编译一个 patched 的 JetBrains Runtime&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h1 id=&#34;开始&#34;&gt;&lt;a href=&#34;#开始&#34; class=&#34;headerlink&#34; title=&#34;开始&#34;&gt;&lt;/a&gt;开始&lt;/h1&gt;IDEA 没法输入中文的问题其实在我系统上盘踞很久了，一会能用一会不能的….所以我打算动手整顿他&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;设置环境变量&#34;&gt;&lt;a href=&#34;#设置环境变量&#34; class=&#34;headerlink&#34; title=&#34;设置环境变量&#34;&gt;&lt;/a&gt;设置环境变量&lt;/h1&gt;&lt;p&gt;学着 ArchLinux Wiki，我首先往 &lt;code&gt;~/.pam_environment&lt;/code&gt; 加了这些东西:  &lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;GTK_IM_MODULE DEFAULT&amp;#x3D;ibus&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;QT_IM_MODULE DEFAULT&amp;#x3D;ibus&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;XMODIFIERS DEFAULT&amp;#x3D;\@im&amp;#x3D;ibus&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而并没有什么效果… 加到 &lt;code&gt;idea.sh&lt;/code&gt; 头上也不行，&lt;code&gt;qtconfig-qt4&lt;/code&gt; 也改过了，没啥效果&lt;/p&gt;
&lt;h1 id=&#34;修改键盘布局&#34;&gt;&lt;a href=&#34;#修改键盘布局&#34; class=&#34;headerlink&#34; title=&#34;修改键盘布局&#34;&gt;&lt;/a&gt;修改键盘布局&lt;/h1&gt;&lt;p&gt;&lt;del&gt;压根没变化&lt;/del&gt;&lt;/p&gt;
&lt;h1 id=&#34;更换输入法&#34;&gt;&lt;a href=&#34;#更换输入法&#34; class=&#34;headerlink&#34; title=&#34;更换输入法&#34;&gt;&lt;/a&gt;更换输入法&lt;/h1&gt;&lt;p&gt;于是我尝试更换到 fcitx （&lt;br&gt;更换到 fcitx 之后似乎已经可以在 idea 窗口里面召唤出 fcitx 了，但是好像还是输入不了中文  &lt;/p&gt;
&lt;h1 id=&#34;自己编译&#34;&gt;&lt;a href=&#34;#自己编译&#34; class=&#34;headerlink&#34; title=&#34;自己编译&#34;&gt;&lt;/a&gt;自己编译&lt;/h1&gt;&lt;p&gt;在 archlinuxcn 论坛上找到了一个回复:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其实解决这个问题的过程还挺曲折的，我不打算直接给出顺利的解决方案，所以建议先看完，再动手操作，否则会踩老坑，以下是折腾记录：&lt;br&gt;问题：fcitx搜狗输入法在idea环境中文输入不跟随光标&lt;br&gt;解决方案参考链接： &lt;a href=&#34;https://blog.csdn.net/u011166277/articl&#34;&gt;https://blog.csdn.net/u011166277/articl&lt;/a&gt; … /106287587&lt;br&gt;辛酸史：&lt;br&gt;先下载JetBrainsRuntime源码，&lt;a href=&#34;https://github.com/JetBrains/JetBrainsRuntime&#34;&gt;https://github.com/JetBrains/JetBrainsRuntime&lt;/a&gt;&lt;br&gt;因为github很慢，所以到&lt;a href=&#34;https://gitee.com/%E4%B8%8A%E5%AF%BC%E5%85%A5github%E8%BF%9B%E8%A1%8C%E4%B8%8B%E8%BD%BD%EF%BC%8C%E8%BF%98%E6%9C%89%E4%B8%A4%E7%A7%8D%E4%B8%8B%E8%BD%BD%E6%96%B9%E5%BC%8F%EF%BC%8C%E6%95%99%E7%A8%8B%E9%83%BD%E5%9C%A8https://zhuanlan.zhihu.com/p/121015450&#34;&gt;https://gitee.com/上导入github进行下载，还有两种下载方式，教程都在https://zhuanlan.zhihu.com/p/121015450&lt;/a&gt;&lt;br&gt;代下载网站&lt;a href=&#34;https://shrill-pond-3e81.hunsh.workers.dev/&#34;&gt;https://shrill-pond-3e81.hunsh.workers.dev/&lt;/a&gt;       &lt;a href=&#34;http://g.widyun.com/&#34;&gt;http://g.widyun.com/&lt;/a&gt;    网速慢的话容易过期&lt;br&gt;下载完JetBrainsRuntime之后下载idea.patch  &lt;a href=&#34;https://github.com/prehonor/myJetBrainsRuntime&#34;&gt;https://github.com/prehonor/myJetBrainsRuntime&lt;/a&gt;&lt;br&gt;然后把idea.patch拷贝到JetBrainsRuntime根目录&lt;br&gt;git checkout cfc3e87f2ac27a0b8c78c729c113aa52535feff6  （这一步经过测试，并不需要，用最新的就好）&lt;br&gt;git apply idea.patch&lt;br&gt;然后根据官方教程编译就行了，但是，别信官方的，经过测试docker打包出现未知错误，还不知道咋查，ubuntu版本低了还不行，一会儿404，一会儿缺jdk11，拖过来一个jdk11又说glibc版本不够，安装glibc直接整个系统挂了，所有命令都不能用了，所以还是开个虚拟机，直接上ubuntu20吧，然后按照官方的教程编译&lt;br&gt;$ sudo apt-get install autoconf make build-essential libx11-dev libxext-dev libxrender-dev libxtst-dev libxt-dev libxrandr-dev libcups2-dev libfontconfig1-dev libasound2-dev&lt;br&gt;$ cd JetBrainsRuntime&lt;br&gt;$ sh ./configure –disable-warnings-as-errors&lt;br&gt;$ make images&lt;br&gt;你以为这就完了吗？中途会直接出现killed错误，所以，内存至少2G，swap单开一个3G的&lt;br&gt;$ dd if=/dev/zero of=swapfile bs=1024 count=3&lt;em&gt;1024&lt;/em&gt;1024&lt;br&gt;$ sudo mkswap swapfile&lt;br&gt;$ sudo swapon swapfile&lt;br&gt;$ free -h&lt;br&gt;然后照常make images，编译完了之后，会生成jdk，从虚拟机中拷贝出来&lt;br&gt;sudo scp -o PasswordAuthentication=yes -r 用户名@虚拟机ip:/home/用户名/JetBrainsRuntime/build/linux-x86_64-normal-server-release/images/jdk  /usr/lib/jvm/java-11.0.7-jetbrains&lt;br&gt;如果你以为按照教程里export IDEA_JDK=/usr/lib/jvm/java-11.0.7-jetbrains 就可以启动，那就又错了，还会报错&lt;br&gt;/usr/lib/jvm/java-11.0.7-jetbrains/bin/java: symbol lookup error: /usr/lib/jvm/java-11.0.7-jetbrains/lib/libnio.so: undefined symbol: initInetAddressIDs&lt;br&gt;你以为只要ldd 看到libjvm.so =&amp;gt; not found就应该把/usr/lib/jvm/java-11.0.7-jetbrains/lib/server/libjvm.so 加到环境变量就行了？不，亲自试验过了，没用，对比了一下正常启动的idea，发现libnet.so路径不对，正常要取jdk里的，于是又加入环境变量，这回启动两次居然直接crash了&lt;br&gt;最后，经过一系列折腾，搞出一个最佳解决办法，修改启动文件&lt;br&gt;$ sudo vim /opt/intellij-idea-ultimate-edition/bin/idea.sh&lt;br&gt;在开头加上&lt;br&gt;export LD_LIBRARY_PATH=/usr/lib/jvm/java-11.0.7-jetbrains/lib:$LD_LIBRARY_PATH &amp;amp;&amp;amp; export IDEA_JDK=/usr/lib/jvm/java-11.0.7-jetbrain&lt;br&gt;这回终于能启动成功了，编译好的jdk最好保存一下，别再这么折腾了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实际操作 ( px 是透明代理 )：  &lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;px git clone https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;JetBrains&amp;#x2F;JetBrainsRuntime&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cd JetBrainsRuntime&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;px wget https:&amp;#x2F;&amp;#x2F;raw.githubusercontent.com&amp;#x2F;prehonor&amp;#x2F;myJetBrainsRuntime&amp;#x2F;master&amp;#x2F;idea.patch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git apply .&amp;#x2F;idea.patch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sh .&amp;#x2F;configure --disable-warnings-as-errors&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;make images #其实这一步内存足够就不会出问题，不一定需要开swap什么的 编译使用的是liberica-11-openjdk&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo mv .&amp;#x2F;build&amp;#x2F;linux-&amp;lt;tab&amp;gt;&amp;#x2F;images&amp;#x2F;jdk &amp;#x2F;usr&amp;#x2F;lib&amp;#x2F;jvm&amp;#x2F;jetbrains-11-openjdk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后打开 IDEA，安装 &lt;code&gt;Choose Runtime&lt;/code&gt; 插件&lt;br&gt;添加自定义jdk，使用你刚编译的jetbrains runtime启动即可。（笔者机器上无报错）&lt;br&gt;此处提供版本 &lt;code&gt;jb11_0_11-b1504.12&lt;/code&gt; 的构建修改版（x86_64）: &lt;a href=&#34;https://ipfs.io/ipfs/QmRMkFu4UKCP4bFfXaMFurRt6f3aWJuWqZj97z1LbC92Ri?filename=jbjdk.7z&#34;&gt;下载&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nstd.sfclub.cc/2021/03/13/%E4%BD%BF%E7%94%A8-cproxy-%E5%AF%B9%E7%A8%8B%E5%BA%8F%E8%BF%9B%E8%A1%8C%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86/</guid>
            <title>使用 cproxy 对程序进行透明代理</title>
            <link>https://nstd.sfclub.cc/2021/03/13/%E4%BD%BF%E7%94%A8-cproxy-%E5%AF%B9%E7%A8%8B%E5%BA%8F%E8%BF%9B%E8%A1%8C%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86/</link>
            <category>tech,linux</category>
            <pubDate>Sat, 13 Mar 2021 22:57:30 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;在 Windows 下，说到 &lt;code&gt;透明代理&lt;/code&gt; ，你可能会想到 &lt;code&gt;Proxifier&lt;/code&gt; , &lt;code&gt;SSTap&lt;/code&gt;, &lt;code&gt;Mellow&lt;/code&gt;&lt;br&gt;但在 Linux 下，你可能会想到 &lt;code&gt;proxychains&lt;/code&gt; 然后再想到 &lt;code&gt;proxychains&lt;/code&gt; 不能代理 static-linked 的程序。  &lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h1 id=&#34;为什么-ProxyChains-NG-不能代理静态连接的程序&#34;&gt;&lt;a href=&#34;#为什么-ProxyChains-NG-不能代理静态连接的程序&#34; class=&#34;headerlink&#34; title=&#34;为什么 ProxyChains(NG) 不能代理静态连接的程序&#34;&gt;&lt;/a&gt;为什么 ProxyChains(NG) 不能代理静态连接的程序&lt;/h1&gt;&lt;p&gt;ProxyChains NG 通过一个预加载的共享库来hook到网络相关的函数(比如: connect,getaddrinfo)上，接着他就可以转发这些流量。&lt;br&gt;缺点似乎显而易见，如果只是通过 &lt;a href=&#34;https://stackoverflow.com/questions/426230/what-is-the-ld-preload-trick&#34;&gt;LD_PRELOAD&lt;/a&gt; 来进行透明代理，那么这招对于静态连接的程序是无用的（比如说 Go 程序..)&lt;br&gt;其次，ProxyChains 只支持 TCP，这可能导致无法转发 DNS 流量 -&amp;gt; DNS 流量泄漏。  &lt;/p&gt;
&lt;h1 id=&#34;cproxy-是什么&#34;&gt;&lt;a href=&#34;#cproxy-是什么&#34; class=&#34;headerlink&#34; title=&#34;cproxy 是什么&#34;&gt;&lt;/a&gt;cproxy 是什么&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/NOBLES5E/cproxy&#34;&gt;cproxy&lt;/a&gt; 也是透明代理，作用和 proxychains 类似。&lt;br&gt;原理上与 proxychains 不同，它使用 &lt;code&gt;cgroup&lt;/code&gt; 进行对程序的代理 &lt;del&gt;，不过配置起来还有点麻烦&lt;/del&gt;&lt;br&gt;本文将会教您在您的Linux PC上使用 cproxy，截至本文发布之前，cproxy似乎只支持 Linux。  &lt;/p&gt;
&lt;h2 id=&#34;下载-cproxy&#34;&gt;&lt;a href=&#34;#下载-cproxy&#34; class=&#34;headerlink&#34; title=&#34;下载 cproxy&#34;&gt;&lt;/a&gt;下载 cproxy&lt;/h2&gt;&lt;p&gt;官方推荐的方法是: 直接用 &lt;code&gt;cargo&lt;/code&gt;    &lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cargo install cproxy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果没有 cargo 可以在 &lt;a href=&#34;https://github.com/NOBLES5E/cproxy/releases&#34;&gt;Release&lt;/a&gt; 上下载压缩包。&lt;br&gt;解压压缩包，可能会发现有两个可执行文件，不过似乎只留一个就好了。  &lt;/p&gt;
&lt;h2 id=&#34;安装-cproxy&#34;&gt;&lt;a href=&#34;#安装-cproxy&#34; class=&#34;headerlink&#34; title=&#34;安装 cproxy&#34;&gt;&lt;/a&gt;安装 cproxy&lt;/h2&gt;&lt;p&gt;先来试一试 cproxy！  &lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cproxy --port &amp;lt;本地代理端口&amp;gt; -- curl ip.sb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;( ｀д′) 失败了&lt;br&gt;如果你和我一样，在port上写了 socks5 的代理端口，那么你就被坑了。&lt;br&gt;笔者填入 geph 的 HTTP 代理端口时是可以成功的，但是使用 v2ray 的s5/http端口都无法使用。&lt;br&gt;这是因为 cproxy 需要&lt;a href=&#34;https://github.com/NOBLES5E/cproxy/wiki/Example-setup-with-V2Ray&#34;&gt;修改 v2ray 的配置&lt;/a&gt;进行兼容，&lt;a href=&#34;https://github.com/zfl9/ipt2socks&#34;&gt;如果你不想去改配置&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;在确保可以使用 cproxy 后，我们来配置 &lt;code&gt;alias&lt;/code&gt;。&lt;br&gt;将以下内容写到 &lt;code&gt;~/.bashrc&lt;/code&gt;，记得自己修改一些部分。  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;alias &amp;quot;px&amp;quot;=&amp;quot;/path/to/cproxy --port &amp;lt;your-local-proxy-port&amp;gt; --&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例如我的配置：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;alias &amp;quot;px&amp;quot;=&amp;quot;/bin/cproxy --port 60080 --use-tproxy -- &amp;quot; # 60080 是ipt2socks的默认监听端口。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;保存后，使用 &lt;code&gt;source ~/.bashrc&lt;/code&gt; 载入，试试 &lt;code&gt;px curl ip.sb&lt;/code&gt;，看看是否成功。  &lt;/p&gt;
&lt;h2 id=&#34;缺陷&#34;&gt;&lt;a href=&#34;#缺陷&#34; class=&#34;headerlink&#34; title=&#34;缺陷&#34;&gt;&lt;/a&gt;缺陷&lt;/h2&gt;&lt;p&gt;每次使用都要 sudo ，还是挺烦人的吧…&lt;br&gt;对于这种情况，也可以考虑使用有后台常驻的 &lt;a href=&#34;https://github.com/springzfx/cgproxy&#34;&gt;cgproxy&lt;/a&gt;，但本文不做介绍，有兴趣可以自己了解。  &lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nstd.sfclub.cc/2021/03/12/hello-world/</guid>
            <title>Hello World</title>
            <link>https://nstd.sfclub.cc/2021/03/12/hello-world/</link>
            <pubDate>Fri, 12 Mar 2021 22:43:58 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;你好, Hexo！&lt;br&gt;折腾了一个晚上，我终于还是回到 Hexo 的怀抱了。&lt;br&gt;接下来会陆陆续续更新一些杂文，并且把我在 Lxnet 发布的那几篇文章搬一下，欢迎 &lt;a href=&#34;https://github.com/iceBear67/blog&#34;&gt;Watch/订阅&lt;/a&gt; 我的博客。  &lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
