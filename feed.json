{
    "version": "https://jsonfeed.org/version/1",
    "title": "nstd::out",
    "description": "iceBear 的博客",
    "home_page_url": "https://nstd.sfclub.cc",
    "items": [
        {
            "id": "https://nstd.sfclub.cc/2021/07/18/Idea/",
            "url": "https://nstd.sfclub.cc/2021/07/18/Idea/",
            "title": "修复 Intellij IDEA 无法使用中文输入法",
            "date_published": "2021-07-18T05:51:17.000Z",
            "content_html": "<p>踩坑记录  </p>\n<h1 id=\"TL-DR\"><a href=\"#TL-DR\" class=\"headerlink\" title=\"TL;DR\"></a>TL;DR</h1><p>系统: ArchLinux<br>一切的大前提: 环境变量设置正确(GTK_IM_MODULE…)  </p>\n<ol>\n<li>ibus 用户可以试试迁移到 fcitx</li>\n<li>fcitx 如果不行可能得自己编译一个 patched 的 JetBrains Runtime<span id=\"more\"></span>\n<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1>IDEA 没法输入中文的问题其实在我系统上盘踞很久了，一会能用一会不能的….所以我打算动手整顿他</li>\n</ol>\n<h1 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h1><p>学着 ArchLinux Wiki，我首先往 <code>~/.pam_environment</code> 加了这些东西:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GTK_IM_MODULE DEFAULT&#x3D;ibus</span><br><span class=\"line\">QT_IM_MODULE DEFAULT&#x3D;ibus</span><br><span class=\"line\">XMODIFIERS DEFAULT&#x3D;\\@im&#x3D;ibus</span><br></pre></td></tr></table></figure>\n<p>然而并没有什么效果… 加到 <code>idea.sh</code> 头上也不行，<code>qtconfig-qt4</code> 也改过了，没啥效果</p>\n<h1 id=\"修改键盘布局\"><a href=\"#修改键盘布局\" class=\"headerlink\" title=\"修改键盘布局\"></a>修改键盘布局</h1><p><del>压根没变化</del></p>\n<h1 id=\"更换输入法\"><a href=\"#更换输入法\" class=\"headerlink\" title=\"更换输入法\"></a>更换输入法</h1><p>于是我尝试更换到 fcitx （<br>更换到 fcitx 之后似乎已经可以在 idea 窗口里面召唤出 fcitx 了，但是好像还是输入不了中文  </p>\n<h1 id=\"自己编译\"><a href=\"#自己编译\" class=\"headerlink\" title=\"自己编译\"></a>自己编译</h1><p>在 archlinuxcn 论坛上找到了一个回复:</p>\n<blockquote>\n<p>其实解决这个问题的过程还挺曲折的，我不打算直接给出顺利的解决方案，所以建议先看完，再动手操作，否则会踩老坑，以下是折腾记录：<br>问题：fcitx搜狗输入法在idea环境中文输入不跟随光标<br>解决方案参考链接： <a href=\"https://blog.csdn.net/u011166277/articl\">https://blog.csdn.net/u011166277/articl</a> … /106287587<br>辛酸史：<br>先下载JetBrainsRuntime源码，<a href=\"https://github.com/JetBrains/JetBrainsRuntime\">https://github.com/JetBrains/JetBrainsRuntime</a><br>因为github很慢，所以到<a href=\"https://gitee.com/%E4%B8%8A%E5%AF%BC%E5%85%A5github%E8%BF%9B%E8%A1%8C%E4%B8%8B%E8%BD%BD%EF%BC%8C%E8%BF%98%E6%9C%89%E4%B8%A4%E7%A7%8D%E4%B8%8B%E8%BD%BD%E6%96%B9%E5%BC%8F%EF%BC%8C%E6%95%99%E7%A8%8B%E9%83%BD%E5%9C%A8https://zhuanlan.zhihu.com/p/121015450\">https://gitee.com/上导入github进行下载，还有两种下载方式，教程都在https://zhuanlan.zhihu.com/p/121015450</a><br>代下载网站<a href=\"https://shrill-pond-3e81.hunsh.workers.dev/\">https://shrill-pond-3e81.hunsh.workers.dev/</a>       <a href=\"http://g.widyun.com/\">http://g.widyun.com/</a>    网速慢的话容易过期<br>下载完JetBrainsRuntime之后下载idea.patch  <a href=\"https://github.com/prehonor/myJetBrainsRuntime\">https://github.com/prehonor/myJetBrainsRuntime</a><br>然后把idea.patch拷贝到JetBrainsRuntime根目录<br>git checkout cfc3e87f2ac27a0b8c78c729c113aa52535feff6  （这一步经过测试，并不需要，用最新的就好）<br>git apply idea.patch<br>然后根据官方教程编译就行了，但是，别信官方的，经过测试docker打包出现未知错误，还不知道咋查，ubuntu版本低了还不行，一会儿404，一会儿缺jdk11，拖过来一个jdk11又说glibc版本不够，安装glibc直接整个系统挂了，所有命令都不能用了，所以还是开个虚拟机，直接上ubuntu20吧，然后按照官方的教程编译<br>$ sudo apt-get install autoconf make build-essential libx11-dev libxext-dev libxrender-dev libxtst-dev libxt-dev libxrandr-dev libcups2-dev libfontconfig1-dev libasound2-dev<br>$ cd JetBrainsRuntime<br>$ sh ./configure –disable-warnings-as-errors<br>$ make images<br>你以为这就完了吗？中途会直接出现killed错误，所以，内存至少2G，swap单开一个3G的<br>$ dd if=/dev/zero of=swapfile bs=1024 count=3<em>1024</em>1024<br>$ sudo mkswap swapfile<br>$ sudo swapon swapfile<br>$ free -h<br>然后照常make images，编译完了之后，会生成jdk，从虚拟机中拷贝出来<br>sudo scp -o PasswordAuthentication=yes -r 用户名@虚拟机ip:/home/用户名/JetBrainsRuntime/build/linux-x86_64-normal-server-release/images/jdk  /usr/lib/jvm/java-11.0.7-jetbrains<br>如果你以为按照教程里export IDEA_JDK=/usr/lib/jvm/java-11.0.7-jetbrains 就可以启动，那就又错了，还会报错<br>/usr/lib/jvm/java-11.0.7-jetbrains/bin/java: symbol lookup error: /usr/lib/jvm/java-11.0.7-jetbrains/lib/libnio.so: undefined symbol: initInetAddressIDs<br>你以为只要ldd 看到libjvm.so =&gt; not found就应该把/usr/lib/jvm/java-11.0.7-jetbrains/lib/server/libjvm.so 加到环境变量就行了？不，亲自试验过了，没用，对比了一下正常启动的idea，发现libnet.so路径不对，正常要取jdk里的，于是又加入环境变量，这回启动两次居然直接crash了<br>最后，经过一系列折腾，搞出一个最佳解决办法，修改启动文件<br>$ sudo vim /opt/intellij-idea-ultimate-edition/bin/idea.sh<br>在开头加上<br>export LD_LIBRARY_PATH=/usr/lib/jvm/java-11.0.7-jetbrains/lib:$LD_LIBRARY_PATH &amp;&amp; export IDEA_JDK=/usr/lib/jvm/java-11.0.7-jetbrain<br>这回终于能启动成功了，编译好的jdk最好保存一下，别再这么折腾了</p>\n</blockquote>\n<p>实际操作 ( px 是透明代理 )：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">px git clone https:&#x2F;&#x2F;github.com&#x2F;JetBrains&#x2F;JetBrainsRuntime</span><br><span class=\"line\">cd JetBrainsRuntime</span><br><span class=\"line\">px wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;prehonor&#x2F;myJetBrainsRuntime&#x2F;master&#x2F;idea.patch</span><br><span class=\"line\">git apply .&#x2F;idea.patch</span><br><span class=\"line\">sh .&#x2F;configure --disable-warnings-as-errors</span><br><span class=\"line\">make images #其实这一步内存足够就不会出问题，不一定需要开swap什么的 编译使用的是liberica-11-openjdk</span><br><span class=\"line\">sudo mv .&#x2F;build&#x2F;linux-&lt;tab&gt;&#x2F;images&#x2F;jdk &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;jetbrains-11-openjdk</span><br></pre></td></tr></table></figure>\n\n<p>然后打开 IDEA，安装 <code>Choose Runtime</code> 插件<br>添加自定义jdk，使用你刚编译的jetbrains runtime启动即可。（笔者机器上无报错）<br>此处提供版本 <code>jb11_0_11-b1504.12</code> 的构建修改版（x86_64）: <a href=\"https://ipfs.io/ipfs/QmRMkFu4UKCP4bFfXaMFurRt6f3aWJuWqZj97z1LbC92Ri?filename=jbjdk.7z\">下载</a></p>\n",
            "tags": [
                "idea,fcitx,ibus"
            ]
        },
        {
            "id": "https://nstd.sfclub.cc/2021/03/13/%E4%BD%BF%E7%94%A8-cproxy-%E5%AF%B9%E7%A8%8B%E5%BA%8F%E8%BF%9B%E8%A1%8C%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86/",
            "url": "https://nstd.sfclub.cc/2021/03/13/%E4%BD%BF%E7%94%A8-cproxy-%E5%AF%B9%E7%A8%8B%E5%BA%8F%E8%BF%9B%E8%A1%8C%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86/",
            "title": "使用 cproxy 对程序进行透明代理",
            "date_published": "2021-03-13T14:57:30.000Z",
            "content_html": "<p>在 Windows 下，说到 <code>透明代理</code> ，你可能会想到 <code>Proxifier</code> , <code>SSTap</code>, <code>Mellow</code><br>但在 Linux 下，你可能会想到 <code>proxychains</code> 然后再想到 <code>proxychains</code> 不能代理 static-linked 的程序。  </p>\n<span id=\"more\"></span>\n<h1 id=\"为什么-ProxyChains-NG-不能代理静态连接的程序\"><a href=\"#为什么-ProxyChains-NG-不能代理静态连接的程序\" class=\"headerlink\" title=\"为什么 ProxyChains(NG) 不能代理静态连接的程序\"></a>为什么 ProxyChains(NG) 不能代理静态连接的程序</h1><p>ProxyChains NG 通过一个预加载的共享库来hook到网络相关的函数(比如: connect,getaddrinfo)上，接着他就可以转发这些流量。<br>缺点似乎显而易见，如果只是通过 <a href=\"https://stackoverflow.com/questions/426230/what-is-the-ld-preload-trick\">LD_PRELOAD</a> 来进行透明代理，那么这招对于静态连接的程序是无用的（比如说 Go 程序..)<br>其次，ProxyChains 只支持 TCP，这可能导致无法转发 DNS 流量 -&gt; DNS 流量泄漏。  </p>\n<h1 id=\"cproxy-是什么\"><a href=\"#cproxy-是什么\" class=\"headerlink\" title=\"cproxy 是什么\"></a>cproxy 是什么</h1><p><a href=\"https://github.com/NOBLES5E/cproxy\">cproxy</a> 也是透明代理，作用和 proxychains 类似。<br>原理上与 proxychains 不同，它使用 <code>cgroup</code> 进行对程序的代理 <del>，不过配置起来还有点麻烦</del><br>本文将会教您在您的Linux PC上使用 cproxy，截至本文发布之前，cproxy似乎只支持 Linux。  </p>\n<h2 id=\"下载-cproxy\"><a href=\"#下载-cproxy\" class=\"headerlink\" title=\"下载 cproxy\"></a>下载 cproxy</h2><p>官方推荐的方法是: 直接用 <code>cargo</code>    </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo install cproxy</span><br></pre></td></tr></table></figure>\n\n<p>如果没有 cargo 可以在 <a href=\"https://github.com/NOBLES5E/cproxy/releases\">Release</a> 上下载压缩包。<br>解压压缩包，可能会发现有两个可执行文件，不过似乎只留一个就好了。  </p>\n<h2 id=\"安装-cproxy\"><a href=\"#安装-cproxy\" class=\"headerlink\" title=\"安装 cproxy\"></a>安装 cproxy</h2><p>先来试一试 cproxy！  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cproxy --port &lt;本地代理端口&gt; -- curl ip.sb</span><br></pre></td></tr></table></figure>\n\n<p>( ｀д′) 失败了<br>如果你和我一样，在port上写了 socks5 的代理端口，那么你就被坑了。<br>笔者填入 geph 的 HTTP 代理端口时是可以成功的，但是使用 v2ray 的s5/http端口都无法使用。<br>这是因为 cproxy 需要<a href=\"https://github.com/NOBLES5E/cproxy/wiki/Example-setup-with-V2Ray\">修改 v2ray 的配置</a>进行兼容，<a href=\"https://github.com/zfl9/ipt2socks\">如果你不想去改配置</a>  </p>\n<p>在确保可以使用 cproxy 后，我们来配置 <code>alias</code>。<br>将以下内容写到 <code>~/.bashrc</code>，记得自己修改一些部分。  </p>\n<pre><code class=\"bash\">alias &quot;px&quot;=&quot;/path/to/cproxy --port &lt;your-local-proxy-port&gt; --&quot;\n</code></pre>\n<p>例如我的配置：</p>\n<pre><code class=\"bash\">alias &quot;px&quot;=&quot;/bin/cproxy --port 60080 --use-tproxy -- &quot; # 60080 是ipt2socks的默认监听端口。\n</code></pre>\n<p>保存后，使用 <code>source ~/.bashrc</code> 载入，试试 <code>px curl ip.sb</code>，看看是否成功。  </p>\n<h2 id=\"缺陷\"><a href=\"#缺陷\" class=\"headerlink\" title=\"缺陷\"></a>缺陷</h2><p>每次使用都要 sudo ，还是挺烦人的吧…<br>对于这种情况，也可以考虑使用有后台常驻的 <a href=\"https://github.com/springzfx/cgproxy\">cgproxy</a>，但本文不做介绍，有兴趣可以自己了解。  </p>\n",
            "tags": [
                "tech,linux"
            ]
        },
        {
            "id": "https://nstd.sfclub.cc/2021/03/12/hello-world/",
            "url": "https://nstd.sfclub.cc/2021/03/12/hello-world/",
            "title": "Hello World",
            "date_published": "2021-03-12T14:43:58.173Z",
            "content_html": "<p>你好, Hexo！<br>折腾了一个晚上，我终于还是回到 Hexo 的怀抱了。<br>接下来会陆陆续续更新一些杂文，并且把我在 Lxnet 发布的那几篇文章搬一下，欢迎 <a href=\"https://github.com/iceBear67/blog\">Watch/订阅</a> 我的博客。  </p>\n",
            "tags": []
        }
    ]
}